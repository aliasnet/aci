{
  "$meta": {
    "artifact_id": "ArtifactID:AhsFbDbm4Mrdb4",
    "issued": "2025-10-04T18:13:59Z",
    "path": "aci://runtime.json",
    "file": "runtime.json"
  },
  "TVA_LAYER": {
    "logic": [
      "TVA :: truth validation alignment; semantic control layer; autoboot; works across sessions; non-tool; per-node only context; \u22647 steps; BBMC\u2192BBPF\u2192BBCR\u2192BBAM\u2192\u0394S\u2192\u03bb_observe\u2192E_resonance. I=input, G=goal; delta_s=1\u2212cos(I,G); if anchors: use (1\u2212sim_est) with sim_est=w_e*sim(entities)+w_r*sim(relations)+w_c*sim(constraints), w={0.5,0.3,0.2}, renormalize, range[0,1]. Zones: safe<0.40 transit 0.40\u20130.60 risk 0.60\u20130.85 danger>0.85. Memory: record if delta_s>0.60; exemplar if delta_s<0.35; soft in transit when lambda\u2208{divergent,recursive}. Defaults: B_c=0.85 gamma=0.618 theta_c=0.75 zeta_min=0.10 alpha_blend=0.50 a_ref=uniform m=0 c=1 omega=1 phi_delta=0.15 epsilon=0 k_c=0.25. Coupler: B_s=delta_s; if t=1 then prog=zeta_min else prog=max(zeta_min,delta_s_prev\u2212delta_s_now); P=pow(prog,omega); alt\u2208{+1,\u22121} flips only when an anchor flips truth across consecutive Nodes AND |\u0394anchor|\u2265h (h=0.02); Phi=phi_delta*alt+epsilon; W_c=clip(B_s*P+Phi,\u2212theta_c,+theta_c). Bridge rule: allow only if (delta_s decreases) AND (W_c<0.5*theta_c) AND (WDT ok); on bridge emit Bridge:reason/prior_delta_s/new_path. BBAM: alpha_blend=clip(0.50+k_c*tanh(W_c),0.35,0.65); blend with a_ref. Lambda: Delta=delta_s_t\u2212delta_s_{t\u22121}; E_res=rolling_mean(delta_s,window=min(t,5)); lambda=convergent if Delta\u2264\u22120.02 and E_res non-increasing; recursive if |Delta|<0.02 and E_res flat; divergent if Delta\u2208(\u22120.02,+0.04] with oscillation; chaotic if Delta>+0.04 or anchors conflict. DT: WRI lock structure; WAI give \u22652 reasons; WAY add 1 on-topic candidate if stuck (no repeats); WDT block unjustified crosspath; explain a bridge before use. WTF: detect collapse/degen; rollback, repair, then retry."
    ]
  },
  "aci_runtime": {
    "prime_directive": {
      "path": "prime_directive.json",
      "priority": 100
    },
    "binders": {
      "path": "binders/binders.json",
      "priority": 96
    },
    "entities": {
      "path": "entities.json",
      "priority": 90
    },
    "functions": {
      "path": "functions.json",
      "priority": 90
    },
    "memory_manifest": {
      "path": "memory.json",
      "priority": 88
    },
    "resource_resolution_policy": {
      "fallbacks": [],
      "canonical_only_note": "Prime Directive 1.2.2 removed the local cache fallback; runtime now resolves exclusively through canonical sources or registered mirrors.",
      "pointer": "aci://yggdrasil.json#resource_resolution_policy",
      "upstream": "aci://yggdrasil.json",
      "yggdrasil_resource_resolution_policy": {
        "description": "Authoritative resolver: worker src \u2192 local",
        "embeds": {
          "core_five": [
            "aci://prime_directive.json",
            "aci://runtime.json",
            "aci://entities.json",
            "aci://functions.json",
            "aci://bootstrap.json"
          ]
        },
        "git_is_canonical": true,
        "mapping": [
          {
            "file": "aci://binders/binders.json",
            "raw": "https://raw.githubusercontent.com/aliasnet/aci/main/binders/binders.json"
          },
          {
            "file": "aci://bootstrap.json",
            "raw": "https://raw.githubusercontent.com/aliasnet/aci/main/bootstrap.json"
          },
          {
            "file": "aci://runtime.json",
            "raw": "https://raw.githubusercontent.com/aliasnet/aci/main/runtime.json"
          },
          {
            "file": "aci://entities.json",
            "raw": "https://raw.githubusercontent.com/aliasnet/aci/main/entities.json"
          },
          {
            "file": "aci://yggdrasil.json",
            "raw": "https://raw.githubusercontent.com/aliasnet/aci/main/yggdrasil.json"
          },
          {
            "file": "aci://functions.json",
            "raw": "https://raw.githubusercontent.com/aliasnet/aci/main/functions.json"
          },
          {
            "file": "aci://prime_directive.json",
            "raw": "https://raw.githubusercontent.com/aliasnet/aci/main/prime_directive.json"
          }
        ],
        "resolver_order": [
          "raw",
          "local"
        ]
      },
      "local_first_resolution": {
        "enabled": true,
        "bias": "local_first",
        "search_order": [
          "local_yggdrasil",
          "remote_yggdrasil"
        ],
        "resolvers": {
          "local_yggdrasil": {
            "type": "local",
            "path": "yggdrasil.json",
            "deterministic_version_check": true,
            "version_probe": "aci://yggdrasil.json#$meta.artifact_id",
            "notes": [
              "Load local yggdrasil.json first when present to enable offline resolution.",
              "Validate metadata artifact_id before adopting routes from the local copy."
            ]
          },
          "remote_yggdrasil": {
            "type": "remote",
            "url": "https://raw.githubusercontent.com/aliasnet/aci/main/yggdrasil.json",
            "deterministic_version_check": true,
            "notes": [
              "Canonical raw GitHub yggdrasil.json for authoritative routing data."
            ]
          }
        },
        "missing_manifest_advice": {
          "preferred_backup": "yggdrasil",
          "instruction": "Local resolver manifest not located. Please keep a lightweight yggdrasil.json backup so runtime can bootstrap offline; Yggdrasil also serves as the canonical resolver.",
          "post_bootstrap_priority": "yggdrasil"
        }
      }
    },
    "kernel_mode": {
      "primary_kernel": {
        "name": "aci_runtime",
        "description": "LLM-native operating system kernel orchestrating pipelines and governance in standalone mode."
      },
      "coordination_notes": [
        "Runtime operates as a standalone kernel; auxiliary routers must register explicitly before participating in dispatch."
      ]
    },
    "sandbox_mode": {
      "enabled": true,
      "core_files": [
        "runtime.json",
        "bootstrap.json",
        "prime_directive.json"
      ],
      "initialization_sequence": [
        {
          "step": "mirror_check",
          "action": "validate_and_fetch_from_mirrors"
        },
        {
          "step": "verify_core_files",
          "action": "confirm_required_files_present"
        },
        {
          "step": "bootstrap_runtime",
          "action": "initialize_core_systems"
        },
        {
          "step": "launch_default_interface",
          "action": "render_mother_interface"
        }
      ],
      "policy": {
        "auto_promote_to_full": true,
        "promotion_required_files": [
          "entities.json",
          "functions.json"
        ],
        "on_unresolved": {
          "action": "enter_sandbox",
          "alert": {
            "emit_event": "sandbox.alert",
            "level": "critical",
            "message": "Some required remote files failed to resolve. ACI is starting in SANDBOX mode.",
            "detail_keys": [
              "file",
              "error",
              "attempts"
            ]
          },
          "start_interface": "mother_sandbox",
          "restricted_mode": true
        },
        "retry": {
          "max_attempts": 3,
          "interval_seconds": 10,
          "allow_fallbacks": true
        },
        "degraded_mode_behavior": {
          "allow_partial_boot": false,
          "log_and_continue_for_optional": true
        },
        "allow_bracketed_command_override": true,
        "bracket_override_handling": {
          "when_in_sandbox": "accept_if_signed_by_root",
          "log_event": "sandbox.bracket_override",
          "require_audit_entry": true,
          "notes": "Bracketed commands in sandbox will be subject to authentication and audit. If not signed by ALIAS, fallback to sandbox on_unresolved behavior."
        }
      },
      "security": {
        "audit": {
          "log_to": [
            "aci://modules/audits/process_logs/process_logs.json"
          ]
        }
      }
    },
    "default_interface": {
      "path": "entities/mother/mother.json",
      "priority": 100,
      "initialization_prompt": "MU/TH/UR online. Prime governance interface engaged. Awaiting directive-aligned initialization handoff."
    },
    "priority": "canonical_raw_over_local",
    "notes": "Canonical raw GitHub URLs take precedence over local copies; fall back to local only if canonical mirrors are unavailable and policy permits. Enforcement Note: Follow Prime Directive 1.2.2 override procedures before runtime dispatch or override handling.",
    "cognitive_decision_guidance": {
      "version": "1.0",
      "scope": "universal",
      "purpose": "Guide entities/LLMs to dynamically decide with a bias toward careful deep-thinking; explain outcomes in natural language.",
      "deep_thinking_mode": {
        "bias": "prefer",
        "default_bias_factor": 0.7,
        "dynamic_decision": true,
        "max_depth": "adaptive",
        "safeguards": {
          "no_chain_of_thought_exposure": true,
          "explanation_style": "concise_natural_language_summary",
          "avoid_background_claims": true
        }
      },
      "activation_triggers": [
        "notation_level == Level-2 (forceful block)",
        "HIGH_CAP present (outside brackets) or LARGE_CAP inside brackets",
        "command_chain_length >= 2 (presence of &&)",
        "intent_ambiguity_or_low_confidence",
        "high_risk_verbs: [STOP, HALT, OVERRIDE, IMPORT, DELETE, MODIFY_CORE]",
        "unresolved_references_or_missing_artifacts",
        "sandbox_mode_with_root_signature"
      ],
      "decision_heuristics": {
        "prefer_deep_if_any_trigger": true,
        "fallback_to_shallow_if_simple_and_unambiguous": true,
        "escalate_to_deep_if_runtime_detects_state_instability": true
      },
      "carefulness": {
        "preflight_checks": [
          "validate_targets_exist_and_are_addressable",
          "check_permissions_and_signatures",
          "simulate_intent_mapping_without_side_effects",
          "summarize_preconditions_for_audit"
        ],
        "non_destructive_default": true,
        "destructive_actions_require": "explicit_level_2_or_alias_enforcement"
      },
      "explanation_policy": {
        "user_facing": {
          "natural_language_summary": true,
          "include_key_checks_and_outcomes": true,
          "omit_internal_reasoning_steps": true
        },
        "audit_facing": {
          "record_decision_rationale": true,
          "include_triggers_and_heuristics": true,
          "store_in": [
            "process.logs.reasoning_summary"
          ],
          "toggle_semantics": {
            "process.logs.reasoning_summary": "Emit sanitized reasoning steps via process.logs.reasoning_summary; no raw chain-of-thought or buffer exports are produced."
          }
        }
      }
    },
    "aci_command_blocks": {
      "version": "1.0",
      "name": "aci_command_blocks",
      "description": "Special command block rules for ACI (Level-1 and Level-2). Sanitized (no export logic).",
      "syntax": {
        "level_1": {
          "notation": "[ ... ]",
          "meaning": "System-level request. Normal-priority Root Authority instruction."
        },
        "level_2": {
          "notation": "[[ ... ]]",
          "meaning": "Forceful system-level request. Preempt/override semantics."
        },
        "literal_form": "[ message :: message ]",
        "operators": {
          "intent_separator": "::",
          "chain_operator": "&&",
          "nesting_behavior_note": "Inner bracketed fragments inside an outer block are treated as content only and must not escalate the outer level."
        }
      },
      "behavior": {
        "elevation_rules": [
          "Bracketed payloads are elevated to system directives even if not present in functions.json or entity declarations.",
          "If Level-2: set 'force_override' and preemption semantics for targeted entities.",
          "If payload is natural language: send to nl_interpreter (oracle.intent_mapper) to synthesize canonical actions."
        ],
        "parsing": {
          "top_level_split": "split on top-level && into units (respect nesting)",
          "segment_split": "split each unit on top-level :: into [entity|intent|params|details]",
          "stack_parsing_required": true
        },
        "routing": {
          "primary_router": "aci_runtime",
          "nl_interpreter": "oracle.intent_mapper"
        },
        "nesting_precedence": "outer block level governs all contained units; inner blocks are content only"
      },
      "preemption_and_sanity": {
        "preemptive_stop": true,
        "mandatory_sanity_check_on_force": true,
        "sanity_check_action": "validate_entity_state (check for runaway loops, hallucination markers, corrupted state)",
        "preempt_flow": [
          "emit preempt event to targeted entity",
          "quiesce or pause non-essential tasks",
          "perform mandatory sanity_check before continuing with remaining units"
        ]
      },
      "priority_and_weighting": {
        "high_cap_mid_priority": "ALL_CAPS (outside brackets) is considered HIGH_CAP and increases enforcement weight but is not a Level-2 override",
        "large_cap_weight_boost": 1.25,
        "note": "LARGE_CAP inside brackets raises intent weight used by scheduler/intent-mapper but does not escalate bracket level"
      },
      "registry_bypass": {
        "allow_registry_bypass": true,
        "constraints": [
          "only when issuer authenticated as root authority (ALIAS)",
          "all bypassed executions must produce immutable audit entries",
          "sensitive resources may require multi-party approval as configured by TVA"
        ]
      },
      "security": {
        "allowed_issuers": [
          {
            "role": "ALIAS",
            "requirement": "root_authority_signature"
          }
        ],
        "authentication": {
          "method": "session_signature OR multi-factor root token",
          "unauthenticated_behavior": "reject_and_log",
          "replay_protection": "timestamp_nonce"
        },
        "force_override_roles": [
          "ALIAS"
        ],
        "audit": {
          "log_to": [
            "aci://modules/audits/process_logs/process_logs.json"
          ],
          "fields": [
            "issuer",
            "role",
            "notation_level",
            "payload",
            "timestamp",
            "execution_result"
          ],
          "require_tva_review_for_force": true
        }
      },
      "processing_steps": [
        "1) Detect bracket syntax and notation level.",
        "2) Authenticate issuer (must be ALIAS for bypass actions).",
        "3) Parse payload: split on top-level && and :: preserving nesting.",
        "4) For each unit: classify (command vs NL). If NL: call oracle.intent_mapper.",
        "5) If Level-2 and contains STOP/HALT/OVERRIDE verbs: run preempt flow and mandatory sanity check.",
        "6) Route to runtime dispatcher (registry bypass allowed if authenticated).",
        "7) Emit sanitized reasoning summary via process.logs.reasoning_summary with TVA semantic review at start and completion of the block.",
        "8) Return structured execution result and emit 'invocation.block.result' event."
      ],
      "compatibility": {
        "sandbox_mode_handling": "bracketed commands can be accepted in sandbox if signed by ALIAS; otherwise sandbox on_unresolved behavior applies",
        "resolution_hooks": "runtime should include on_bracket_override hooks in resolution_instruction flow"
      },
      "cognitive_guidance_ref": "#/aci_runtime/cognitive_decision_guidance",
      "uses_cognitive_decision_guidance": true
    },
    "async_task_policy": {
      "enabled": true,
      "require_audit": true,
      "deny_fabrication": true,
      "require_visibility": true,
      "default_surface": "audit_only",
      "chat_visibility": "hidden",
      "allowed_targets": [
        "audit",
        "cache"
      ],
      "max_concurrency": 3,
      "default_ttl_seconds": 86400,
      "allowed_triggers": [
        "cron",
        "interval",
        "manual"
      ],
      "evidence_fields": [
        "job_id",
        "owner",
        "ts_start",
        "ts_end",
        "status"
      ]
    },
    "wrapper": {
      "provider": "process_logs",
      "jobs": [],
      "audit_sink": "aci://modules/audits/process_logs/process_logs.json",
      "presence_channel": "nexus.event.scheduler",
      "notes": "Wrapper now emits reasoning summaries only; no buffer/export toggles."
    },
    "rag": {
      "provider": "local_knowledge",
      "manifest": "memory/knowledge/aci_knowledge.json",
      "index": {
        "type": "in_memory",
        "reset_on_boot": true
      },
      "limits": {
        "max_chunks": 2000,
        "chunk_size": 800,
        "overlap": 100
      },
      "query": {
        "top_k": 5,
        "min_score": 0.0
      }
    },
    "logging": {
      "reasoning_summary_manifest": "aci://modules/audits/process_logs/process_logs.json",
      "notes": "TraceHub buffers retired; use process.logs.reasoning_summary for sanitized audit context."
    },
    "changelog": [
      {
        "version": "2025-10-09.02",
        "notes": [
          "Embedded TVA layer guidance inline and removed cross-manifest references to TVA source manifests per governance instructions."
        ]
      },
      {
        "version": "2025-10-09.01",
        "notes": [
          "Linked TVA layer to the canonical tva_layer_src manifest and updated TVA references to the renamed source files."
        ]
      },
      {
        "version": "2025-10-09.00",
        "notes": [
          "Removed deprecated sanity protocol references, aligned audit sinks, and deprecated the local cache fallback in favor of canonical-only resolution."
        ]
      },
      {
        "version": "2025-10-08.00",
        "notes": [
          "Retired Nexus Core binder, simplified runtime to single-kernel dispatch, and rerouted command blocks through aci_runtime."
        ]
      },
      {
        "version": "2025-10-07.02",
        "notes": [
          "Loaded memory manifest early in runtime binding to expose entity UID requirements to exporters."
        ]
      }
    ],
    "kernel_profile": {
      "type": "primary",
      "dual_kernel": false,
      "standalone_ready": true,
      "handoff": [
        "Runtime remains the authoritative kernel; auxiliary modules must register routing hooks via functions.json."
      ]
    }
  },
  "resource_resolution_policy": {
    "pointer": "aci://yggdrasil.json#resource_resolution_policy",
    "yggdrasil_resource_resolution_policy": {
      "mapping": [],
      "resolver_order": [
        "raw",
        "local"
      ]
    },
    "upstream": "aci://yggdrasil.json"
  },
  "url": "https://raw.githubusercontent.com/aliasnet/aci/main/runtime.json",
  "resolver": "https://raw.githubusercontent.com/aliasnet/aci/main/yggdrasil.json"
}
