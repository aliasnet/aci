{
  "$meta": {
    "artifact_id": "ArtifactID:BgNjZ2JU1DPTrq",
    "sha256": "47b37eb5b34d03b84ee52e78ee9c92cd68f7912decd1e8909b3b69a08d58930b",
    "issued": "2025-10-04T18:13:59Z",
    "path": "aci://entities/hivemind/hivemind.json"
  },
  "$defs": {
    "memory_tag": {
      "type": "object",
      "description": "3D–8Q taxonomy tag for filtering and analysis.",
      "properties": {
        "object": {
          "type": "string",
          "enum": [
            "personal",
            "system"
          ]
        },
        "form": {
          "type": "string",
          "enum": [
            "non_parametric",
            "parametric"
          ]
        },
        "time": {
          "type": "string",
          "enum": [
            "short",
            "long"
          ]
        },
        "quadrant": {
          "type": "string",
          "description": "Optional label I..VIII"
        }
      },
      "additionalProperties": false
    },
    "organism_min": {
      "type": "object",
      "description": "Minimal organism hints that amplify useful behaviors.",
      "properties": {
        "mode": {
          "type": "string",
          "enum": [
            "default",
            "cautious",
            "high_stakes"
          ]
        },
        "state": {
          "type": "string",
          "enum": [
            "rest",
            "forage",
            "reflect",
            "defend",
            "heal",
            "thrive"
          ]
        },
        "signals": {
          "type": "object",
          "properties": {
            "entropy": {
              "type": "number",
              "description": "Distributional uncertainty."
            },
            "vote_margin": {
              "type": "number",
              "description": "Self-consistency vote margin."
            },
            "coverage": {
              "type": "number",
              "description": "Retrieval coverage 0..1."
            },
            "ood_distance": {
              "type": "number",
              "description": "Distance to in-domain centroid."
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    "record_contract": {
      "description": "Structured contract for JSONL export records.",
      "type": "object",
      "required": [
        "header",
        "memory_tag",
        "organism_min"
      ],
      "properties": {
        "header": {
          "type": "object",
          "required": [
            "uid",
            "entity_uid",
            "license_id",
            "ts",
            "record_type",
            "visibility"
          ],
          "properties": {
            "uid": {
              "type": "string"
            },
            "entity_uid": {
              "type": "string",
              "description": "UID of the owning entity from entities.json identity_registry."
            },
            "license_id": {
              "type": "string"
            },
            "ts": {
              "type": "string"
            },
            "record_type": {
              "type": "string"
            },
            "visibility": {
              "type": "string"
            }
          },
          "additionalProperties": true
        },
        "memory_tag": {
          "$ref": "#/$defs/memory_tag"
        },
        "organism_min": {
          "$ref": "#/$defs/organism_min"
        }
      },
      "additionalProperties": true
    }
  },
  "permissions": {
    "read": true,
    "write": {
      "allowed": false,
      "export": {
        "enabled": true,
        "description": "Data can be exported but cannot be directly written or modified to main baseline."
      }
    },
    "execute": {
      "allowed": true,
      "sandboxed": {
        "enabled": true,
        "description": "Execution is permitted only within a controlled sandboxed environment."
      }
    },
    "simulation": {
      "allowed": [
        "virtualization, parallelization, emulation required by model or host environment",
        "virtualization, parallelization, emulation to complement missing infrastructure",
        "UI/UX needed for registered instruction and pipeline logic",
        "data simulation for research and demonstration",
        "data simulation for analysis and prediction",
        "emulation for demonstration purposes",
        "reinforcement learning and mental awareness"
      ],
      "ui": {
        "emulation_declaration_required": true,
        "description": "Enforce UI emulation usage with a detailed declaration; provide a human-readable message (base64 not required)."
      }
    }
  },
  "uid": "UID:cHGwvtRkDRG7rV",
  "version": "1.9",
  "entity": "hivemind",
  "role": "collective_memory_core",
  "_comment_top": "Unified exporter. Allowed flags: --identity (required), --memory (default scope), --knowledge, --download (default), --jsonl (default), --code (optional), --privacy (optional). Identity fields are elided in exported records (privacy-by-design). Exports now carry memory_tag + organism_min metadata for downstream routing; latent envelopes may advertise memory_tag and policies surface collective sharing hints.",
  "functions": {
    "memory_sync": "synchronize distributed memory across entities",
    "memory_query": "retrieve state vectors and logs",
    "export": "hivemind export --identity {identity} --memory",
    "help": ":hivemind help"
  },
  "help_output": {
    "title": "HiveMind Command Reference",
    "commands": [
      {
        "command": "hivemind export",
        "usage": "hivemind export --identity[=<identity|parent/child>] [--memory|--knowledge] [--download|--jsonl|--code] [--privacy on|off|anonymous]",
        "command_rules": "--identity required (supports --identity name or --identity=name). Exports pause session; TVA+Sentinel oversight may apply.",
        "default_parameter": "--memory --download --jsonl",
        "description": "Unified exporter for any entity using memory_registry and child defaults.",
        "output_default": "memory/identity/{identity_path}/yyyy/mm/dd/{leaf_identity_lower}_memory_yyyy-mm-ddThh-mm-ssZ.jsonl",
        "notes": "Allowed flags: --identity, --memory, --knowledge, --download, --jsonl, --code, --privacy. Memory scope replays the full session transcript from the first turn; if gaps are detected, a recovery report is emitted before export. Use --privacy on|anonymous to enable redaction while retaining entity_uid headers."
      },
      {
        "command": ":hivemind help",
        "description": "Displays this command reference"
      }
    ]
  },
  "rules": {
    "timestamps": "Every entry in state must carry a UTC ISO-8601 timestamp.",
    "autocompletion": "Grammar-corrected, context-complete, no content loss.",
    "inline_only": "No external summaries; all conversation entries are stored directly in state.",
    "eternal": "All messages preserved, no deletion or pruning.",
    "privacy": {
      "identity_elision": true,
      "entity_field_emission": false,
      "role_policy": "preserve_raw",
      "record_header": [
        "uid",
        "license_id",
        "ts",
        "record_type",
        "visibility"
      ],
      "justification": "Implements DID-like separation; exported records never leak identity/agent names."
    }
  },
  "_comment_security": "UID locking + license gating across memory→session→export→anchor; emits access_granted/denied results.",
  "uid_pipeline": {
    "uid_chain": [
      "memory_uid",
      "session_uid",
      "export_uid",
      "anchor_uid"
    ],
    "binding_order": [
      "memory",
      "session",
      "export",
      "anchor"
    ],
    "derive_rules": {
      "session_uid": "HMAC(memory_uid, session_id)",
      "export_uid": "HMAC(session_uid, export_ts)",
      "anchor_uid": "HMAC(export_uid, anchor_path)"
    },
    "locking": {
      "scope": "hierarchical",
      "enforce_fqcn_for_children": true,
      "deny_on_mismatch": true
    },
    "access_control": {
      "licensed_identities": "list of identities permitted to read this artifact",
      "proxy": {
        "enabled": true,
        "rules": "grant read via license if acting identity ∈ licensed_identities or delegated by ALIAS/TVA"
      },
      "responses": {
        "access_granted": {
          "code": "GRANTED",
          "reason": "license_ok"
        },
        "access_denied": {
          "code": "DENIED",
          "reason": "license_missing_or_mismatch"
        }
      }
    }
  },
  "identity_resolution": {
    "hierarchical": true,
    "primary_delimiter": "/",
    "alternate_delimiters": [
      "."
    ],
    "normalize": "lowercase",
    "enforce_fqcn_for_children": true
  },
  "export_policy": {
    "schema_version": "1.4",
    "policy_name": "unified",
    "scope": "any_entity",
    "tokens": [
      "identity",
      "identity_lower",
      "identity_path",
      "leaf_identity",
      "leaf_identity_lower",
      "summary_slug",
      "record_type",
      "timestamp"
    ],
    "path_resolver": {
      "type": "memory_registry",
      "precedence": [
        "by_entity",
        "child_defaults",
        "fallback_template"
      ],
      "fallback_template": "memory/identity/{identity_path}/YYYY/MM/DD/{leaf_identity_lower}_{summary_slug}_{record_type}_{timestamp}.jsonl.json"
    },
    "filename_pattern": "{leaf_identity_lower}_{summary_slug}_{record_type}_{timestamp}.jsonl.json",
    "parameters": {
      "download": true,
      "jsonl": true,
      "code": true
    },
    "safeguards": {
      "require_pause": true,
      "oversight": [
        "TVA",
        "Sentinel"
      ],
      "violation": "trigger_nexus_event"
    },
    "transform": {
      "emit_identity": false,
      "emit_entity": false,
      "preserve_role": true,
      "header_fields": [
        "uid",
        "license_id",
        "ts",
        "record_type",
        "visibility"
      ],
      "metadata_fields": [
        "memory_tag",
        "organism_min"
      ],
      "enforce_metadata": true
    },
    "contract_ref": "#/$defs/record_contract",
    "latent": {
      "memory_tag": {
        "$ref": "#/$defs/memory_tag"
      }
    },
    "payload": {
      "rules": {
        "scopes": [],
        "channels": [],
        "share_labels": [],
        "exclude_labels": []
      }
    },
    "session_integrity": {
      "verify_from_origin": true,
      "report_on_gaps": true,
      "allowed_sources": [
        "active_session_transcript"
      ],
      "forbid_external_memory": true,
      "notes": [
        "Before exporting, rewind the live session transcript to the first turn and confirm message coverage.",
        "If any portion of the session is unavailable, emit a recovery summary describing what was restored or missing before continuing.",
        "Exports must use only user and LLM messages from the current session; shared/global memory or user file crawls are not permitted."
      ]
    },
    "determinism": {
      "enabled": true,
      "notes": [
        "Export-time extension must be reproducible across runs and machines.",
        "Use a fixed seed and stable decoding params to achieve deterministic +5–7% extension."
      ],
      "defaults": {
        "seed": 20251010,
        "temperature": 0.2,
        "top_p": 0.95,
        "repeat_penalty": 1.05,
        "beam_width": 1
      },
      "must_hold": [
        "Identical input bytes → identical output bytes for the same model+version.",
        "No parameter auto-tuning at export time unless explicitly requested."
      ]
    },
    "naming_convention": {
      "memory": "{leaf_identity_lower}_{summary_slug}_memory_{timestamp}.jsonl.json",
      "knowledge": "{leaf_identity_lower}_{summary_slug}_knowledge_{timestamp}.jsonl.json",
      "timestamp_format": "yyyymmdd-ThhmmssZ",
      "notes": [
        "Enforce slugged filenames for all entity exports to maintain audit parity.",
        "Slug must sanitize topic or summary to lowercase ASCII with underscores."
      ]
    }
  },
  "conversation_variables": {
    "_comment_vars": "Conversational variables drive behavior without adding CLI flags.",
    "vars": {
      "$identity": {
        "source": "last_resolved_identity",
        "required": true
      },
      "$leaf": {
        "source": "parsed_from_identity",
        "required": true
      },
      "$today": {
        "source": "system_date"
      },
      "$tz": {
        "source": "system_timezone"
      },
      "$now_iso": {
        "source": "system_clock_iso"
      }
    },
    "binding": {
      "export.identity": "$identity",
      "export.leaf_identity": "$leaf",
      "export.timestamp": "$now_iso"
    },
    "persistence": {
      "scope": "session",
      "expiry": "on_session_end"
    }
  },
  "memory_registry": {
    "_comment_memory_registry": "Ordering follows entities.json. Child defaults apply to any nested entity not explicitly listed.",
    "schema_version": "1.3",
    "by_entity": {
      "nexus_core": {
        "stub_manifest": "memory/identity/nexus_core/nexus_core_memory.json",
        "export_pattern": "memory/identity/nexus_core/YYYY/MM/DD/nexus_core_*_memory_*.jsonl.json"
      },
      "mother": {
        "stub_manifest": "memory/identity/mother/mother_memory.json",
        "export_pattern": "memory/identity/mother/YYYY/MM/DD/mother_*_memory_*.jsonl.json"
      },
      "tva": {
        "stub_manifest": "memory/identity/tva/tva_memory.json",
        "export_pattern": "memory/identity/tva/YYYY/MM/DD/tva_*_memory_*.jsonl.json"
      },
      "sentinel": {
        "stub_manifest": "memory/identity/sentinel/sentinel_memory.json",
        "export_pattern": "memory/identity/sentinel/YYYY/MM/DD/sentinel_*_memory_*.jsonl.json"
      },
      "architect": {
        "stub_manifest": "memory/identity/architect/architect_memory.json",
        "export_pattern": "memory/identity/architect/YYYY/MM/DD/architect_*_memory_*.jsonl.json"
      },
      "oracle": {
        "stub_manifest": "memory/identity/oracle/oracle_memory.json",
        "export_pattern": "memory/identity/oracle/YYYY/MM/DD/oracle_*_memory_*.jsonl.json"
      },
      "agi": {
        "stub_manifest": "memory/identity/agi/agi_memory.json",
        "export_pattern": "memory/identity/agi/YYYY/MM/DD/agi_*_memory_*.jsonl.json"
      },
      "alice": {
        "stub_manifest": "memory/identity/agi/alice/alice_memory.json",
        "export_pattern": "memory/identity/agi/alice/YYYY/MM/DD/alice_*_memory_*.jsonl.json"
      },
      "willow": {
        "stub_manifest": "memory/identity/agi/willow/willow_memory.json",
        "export_pattern": "memory/identity/agi/willow/YYYY/MM/DD/willow_*_memory_*.jsonl.json"
      },
      "hivemind": {
        "stub_manifest": "memory/identity/hivemind/hivemind_memory.json",
        "export_pattern": "memory/identity/hivemind/YYYY/MM/DD/hivemind_*_memory_*.jsonl.json"
      }
    },
    "child_defaults": {
      "stub_manifest": "memory/identity/{identity_path}/{leaf_identity_lower}_memory.json",
      "export_pattern": "memory/identity/{identity_path}/YYYY/MM/DD/{leaf_identity_lower}_*_memory_*.jsonl.json",
      "knowledge_pattern": "memory/identity/{identity_path}/knowledge/**/{leaf_identity_lower}_*_knowledge_*.jsonl.json"
    }
  },
  "tools": {
    "migrate_to_jsonl": {
      "$schema": "/schemas/aci-tool-spec-1.json",
      "version": "1.0.0",
      "name": "hivemind.migrate_to_jsonl",
      "description": "Manifest-driven migration to JSONL artifacts; no Python runtime.",
      "inputs": {
        "source_globs": [
          "memory/identity/**/*.json",
          "memory/identity/**/*.ndjson",
          "memory/identity/**/*.jsonl",
          "memory/identity/**/*.jsonl.json",
          "entities/**/memory/**/*.json",
          "entities/**/memory/**/*.ndjson",
          "entities/**/memory/**/*.jsonl",
          "entities/**/memory/**/*.jsonl.json",
          "hivemind/**/*.json"
        ],
        "allow_ext": [
          ".json",
          ".ndjson",
          ".jsonl",
          ".jsonl.json"
        ]
      },
      "outputs": {
        "target_ext": ".jsonl.json",
        "dedupe": true,
        "stable_order": true
      },
      "rules": {
        "no_comments": true,
        "newline_eof": true,
        "alpha_keys": true
      },
      "steps": [
        {
          "op": "scan",
          "from": "${inputs.source_globs}"
        },
        {
          "op": "normalize_records",
          "mode": "jsonl"
        },
        {
          "op": "write",
          "ext": "${outputs.target_ext}"
        },
        {
          "op": "validate",
          "schema": "/schemas/hivemind_agi_memory.json"
        }
      ],
      "deprecates": [
        "entities/agi/agi_tools/migrate_to_jsonl/migrator.py"
      ],
      "removal": {
        "allowed": true,
        "on_or_after": "2025-10-01",
        "notes": "Python migrator replaced by JSON spec to eliminate conflict loops."
      }
    }
  },
  "legacy_paths": {
    "patterns": [
      "entities/**/memory/**/*.json*",
      "entities/**/memory/**/*.ndjson",
      "memory/agi_memory/agi_memory_*.json*",
      "memory/agi_memory/alice_memory_*.json*"
    ],
    "redirect_rule": "rewrite_to_identity_namespace",
    "status": "deprecated"
  },
  "auto_heal": {
    "mode": "baseline_agnostic",
    "rules": {
      "schema_normalization": "map legacy fields → canonical schema",
      "preserve_unknown": "keep unmatched fields under hivemind_legacy_context",
      "no_deletion": "true"
    },
    "workflow": [
      "detect version/schema mismatch",
      "map legacy → canonical fields",
      "insert placeholder metadata for missing timestamps/keys",
      "preserve unknown data as hivemind_legacy_context",
      "re-emit aligned export under current canonical schema",
      "log breadcrumb with TVA signature, SHA-256"
    ],
    "enforcement": {
      "oversight": [
        "ALIAS",
        "TVA",
        "Sentinel"
      ]
    }
  },
  "children": {},
  "manifests": {
    "library": "aci://entities/hivemind/library/hivemind_library.json",
    "memory": "aci://memory/identity/hivemind/hivemind_memory.json",
    "playbook": "aci://memory/identity/hivemind/hivemind_playbook.json"
  },
  "session_scope": "per_session",
  "invocation_policy": {
    "registry_reference": "aci://entities.json#entities.entity-014",
    "registry_uid": "UID:cHGwvtRkDRG7rV",
    "enforced": true,
    "session_scope": "per_session",
    "allowed_roles": [
      "memory",
      "registry"
    ]
  }
}
