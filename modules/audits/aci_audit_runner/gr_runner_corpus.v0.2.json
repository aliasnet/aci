{
  "$meta": {
    "artifact_id": "ArtifactID:BJkqri2Urq9mC8",
    "sha256": "45536b2ccb24e5f69c69f064681e3afb652ccbc995533002c8b57860d6220e5f",
    "issued": "2025-10-04T18:13:59Z",
    "path": "aci://modules/audits/aci_audit_runner/gr_runner_corpus.v0.2.json"
  },
  "corpus_id": "ACI-RC-20251003-v0.2",
  "created": "2025-10-03T00:00:00Z",
  "files": [
    {
      "target": "/mnt/data/aci/modules/audits/aci_audit_runner/adaptive_audit_runner.py",
      "mode": "0644",
      "sha256": "3426473e411669e3d2204f862ec04541140142a164c281553aa2440e983d5234",
      "encoding": "base64",
      "content": ""
    },
    {
      "target": "/mnt/data/aci/config/aci_runner_spec.json",
      "mode": "0644",
      "sha256": "9ee6c23c40485c6765716a1a024b50baef41d468babf0518b196a1d001707ef6",
      "encoding": "utf-8",
      "content": "{\n  \"$meta\": {\n    \"artifact_id\": \"ArtifactID:4oci6MbqPmGJ4k\",\n    \"sha256\": \"77f2dd8b081229fee08f06d93025c490bbc94438b50f7825f034541e3d2a6706\",\n    \"issued\": \"2025-10-04T18:13:59Z\",\n    \"path\": \"aci://modules/aci_audit_runner/aci_runner_spec.v0.2.json\"\n  },\n  \"version\": \"0.2\",\n  \"resolvers\": {\n    \"order\": [\n      \"primary\",\n      \"fallback\",\n      \"local\"\n    ],\n    \"primary\": \"https://raw.githubusercontent.com/aliasnet/aci/main\",\n    \"fallback\": \"https://aci.aliasmail.cc\",\n    \"local_root\": \"/mnt/data/aci/local\"\n  },\n  \"resources\": [\n    {\n      \"name\": \"prime_directive\",\n      \"relpath\": \"prime_directive.md\",\n      \"kind\": \"md\"\n    },\n    {\n      \"name\": \"runtime\",\n      \"relpath\": \"runtime.json\",\n      \"kind\": \"json\",\n      \"required_keys\": [\n        \"resolver\"\n      ]\n    },\n    {\n      \"name\": \"functions\",\n      \"relpath\": \"functions.json\",\n      \"kind\": \"json\"\n    },\n    {\n      \"name\": \"metacognition\",\n      \"relpath\": \"library/metacognition/metacognition.json\",\n      \"kind\": \"json\"\n    },\n    {\n      \"name\": \"metacognition_options\",\n      \"relpath\": \"library/metacognition/metacognition_options.json\",\n      \"kind\": \"json\",\n      \"optional\": true\n    },\n    {\n      \"name\": \"yggdrasil\",\n      \"relpath\": \"binders/yggdrasil.json\",\n      \"kind\": \"json\"\n    }\n  ],\n  \"locators_regex\": {\n    \"metacognition\": \"library/metacognition/metacognition(_options)?\\\\.json$\",\n    \"functions\": \"functions(\\\\.registry)?\\\\.json$\",\n    \"yggdrasil\": \"entities/ygg(dr|rd)asil\\\\.json$\",\n    \"prime_directive\": \"prime(_)?directive\\\\.(md|txt)$\"\n  },\n  \"hooks\": {\n    \"self_validation\": [\n      {\n        \"id\": \"rt.resolver.has_primary\",\n        \"select\": \"runtime.resolver.order\",\n        \"assert\": {\n          \"contains\": \"primary\"\n        },\n        \"severity\": \"error\"\n      },\n      {\n        \"id\": \"fx.registry.present\",\n        \"select\": \"functions\",\n        \"assert\": {\n          \"exists\": true\n        },\n        \"severity\": \"error\"\n      }\n    ],\n    \"metacognition\": {\n      \"signals\": [\n        {\n          \"id\": \"digest.delta\",\n          \"type\": \"digest_diff\",\n          \"scope\": [\n            \"runtime\",\n            \"functions\",\n            \"metacognition\",\n            \"yggdrasil\"\n          ]\n        },\n        {\n          \"id\": \"change.rate\",\n          \"type\": \"change_rate\",\n          \"window\": 20,\n          \"threshold_warn\": 4,\n          \"threshold_err\": 8\n        }\n      ]\n    }\n  },\n  \"comm_mode\": \"silent\",\n  \"interval\": 300,\n  \"jitter\": 5,\n  \"recovery\": {\n    \"corpus_id\": \"ACI-RC-20251003-v0.2\",\n    \"path\": \"library/audits/aci_audit_runner/gr_runner_corpus.v0.2.json\",\n    \"sha256\": \"e4c9c6e317b3457bc46cbad6c0d0a151adb9f05f85056a5a8c179595daa4f394\"\n  },\n  \"cadence\": {\n    \"mode\": \"burst\",\n    \"min_cycles\": 1,\n    \"recommended_max_cycles\": 2,\n    \"interval_seconds\": 300,\n    \"jitter_seconds\": 5,\n    \"deadline_seconds\": 1800,\n    \"notes\": \"Use --max-cycles 1 for nominal bursts; extend to 2 only for diagnostics within the 30 minute platform window.\"\n  },\n  \"scheduler_prompt\": {\n    \"summary\": \"Run an ACI audit burst to keep artifacts warm in /mnt/data.\",\n    \"steps\": [\n      \"Ensure /mnt/data/aci/modules/audits/aci_audit_runner/adaptive_audit_runner.py, /mnt/data/aci/logs/, /mnt/data/aci/state/, and /mnt/data/aci/audit/tmp/ exist (create directories if missing).\",\n      \"If the runner is missing, rebuild the JSON-native skeleton from the recovery corpus so each cycle writes state-<UTC>.json, audit-<UTC>.json, and an INFO line to aci-YYYYMMDD.log.\",\n      \"Execute the burst with adaptive spacing, enforce at least one safe iteration, cap the run with --max-cycles 1 (or 2 when debugging), and honor the 1800 second burst deadline.\",\n      \"Hold artifacts locally unless requested; report success with 'Audit burst OK (1 cycle).' or gaps with 'MISSING <path> (tried: github, mirror, local, project)'.\"\n    ],\n    \"command\": \"python /mnt/data/aci/modules/audits/aci_audit_runner/adaptive_audit_runner.py --mode pull --interval 300 --jitter 5 --silent --max-cycles 1 --burst-deadline 1800\",\n    \"success_message\": \"Audit burst OK (1 cycle).\",\n    \"missing_template\": \"MISSING <path> (tried: github, mirror, local, project)\"\n  },\n  \"final_check\": {\n    \"order\": [\n      \"prime_directive.txt|md\",\n      \"runtime.json\",\n      \"entities.json\",\n      \"functions.json\",\n      \"library/metacognition/metacognition.json\",\n      \"library/metacognition/metacognition_options.json\",\n      \"binders/yggdrasil.json\",\n      \"library/audits/aci_audit_runner/aci_runner_spec.v0.2.json\",\n      \"library/audits/aci_audit_runner/gr_runner_corpus.v0.2.json\"\n    ],\n    \"success\": \"Audit burst OK (1 cycle).\",\n    \"on_missing\": \"MISSING <path> (tried: github, mirror, local, project)\"\n  }\n}\n"
    }
  ],
  "restore_instructions": [
    "Create parent dirs if missing.",
    "Write each file atomically; set permissions.",
    "Verify sha256 for each file.",
    "Run: python /mnt/data/aci/modules/audits/aci_audit_runner/adaptive_audit_runner.py --mode once --silent"
  ]
}
