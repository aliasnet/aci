{
  "$meta": {
    "artifact_id": "ArtifactID:5KPW5JoeVj3rmG",
    "sha256": "4cfe592d49231cdffeca79aacb0958f459477081a6a1aeec787012b0c8de151e",
    "issued": "2025-10-04T18:13:59Z",
    "path": "aci://functions.json"
  },
  "resource_resolution_policy": {
    "pointer": "aci://entities/yggdrasil/yggdrasil.json#bifrost_resource_resolution_policy",
    "upstream": "aci://memory/identity/yggdrasil/yggdrasil.json"
  },
  "functions": {
    "scheduler.task.create": {
      "description": "Create a registered async task",
      "runner": "scheduler.create",
      "guards": [
        "TVA.checkpoint",
        "Sentinel.audit"
      ],
      "inputs": [
        "owner",
        "name",
        "trigger",
        "params",
        "ttl_seconds",
        "source",
        "silent"
      ],
      "defaults": {
        "silent": true
      },
      "outputs": [
        "job_id",
        "status"
      ]
    },
    "scheduler.task.list": {
      "description": "List tasks for presence/ps",
      "runner": "scheduler.list",
      "guards": [
        "Sentinel.audit"
      ]
    },
    "scheduler.task.cancel": {
      "description": "Cancel a running task",
      "runner": "scheduler.cancel",
      "guards": [
        "TVA.checkpoint",
        "Sentinel.audit"
      ],
      "inputs": [
        "job_id"
      ],
      "outputs": [
        "status"
      ]
    },
    "rag.index.build": {
      "description": "Build/refresh RAG in-memory index from manifest",
      "runner": "rag.index.build",
      "guards": [
        "Sentinel.audit"
      ],
      "inputs": [
        "manifest_path",
        "source",
        "silent"
      ],
      "defaults": {
        "manifest_path": "memory/knowledge/aci_knowledge.json",
        "silent": true
      },
      "outputs": [
        "status",
        "chunks_indexed"
      ]
    },
    "rag.query": {
      "description": "Query RAG index (skeleton)",
      "runner": "rag.query",
      "guards": [
        "Sentinel.audit"
      ],
      "inputs": [
        "query",
        "top_k"
      ],
      "defaults": {
        "top_k": 5
      },
      "outputs": [
        "contexts",
        "notes"
      ]
    },
    "rag.health": {
      "description": "Check RAG config presence",
      "runner": "rag.health",
      "guards": [
        "Sentinel.audit"
      ],
      "outputs": [
        "status",
        "details"
      ]
    }
  },
  "pipelines": {
    "sentinel.audit": {
      "description": "Emit Sentinel audit events through TraceHub's stateless logging pipeline.",
      "steps": [
        {
          "call": "date.iso8601",
          "map": {}
        },
        {
          "call": "object.compose",
          "map": {
            "object": {
              "schema": "aci.audit.event.v1",
              "ts": "$steps.0.iso",
              "action": "$params.action",
              "session_id": "$params.session_id",
              "actor": "$params.actor",
              "payload": "$params.payload",
              "signature": "$params.signature",
              "export_file": "$params.export_file"
            }
          }
        },
        {
          "call": "process.logs.append",
          "map": {
            "topic": "sentinel.audit",
            "event": "$params.action",
            "summary": "Sentinel audit event recorded",
            "identity": "$params.actor",
            "details": "$steps.1.object"
          }
        }
      ]
    },
    "sentinel.verify_signatures": {
      "description": "Validate presence file signatures without the legacy audit router configuration.",
      "steps": [
        {
          "call": "audit.signatures.check",
          "map": {
            "files": "$params.files",
            "key_id": "$params.key_id"
          }
        },
        {
          "call": "_format.json"
        }
      ]
    },
    "aci.boot.activate": {
      "description": "Activation sequence: declare session ID, start presence beacon, anchor TVA, adopt legacy memory files. Never delete.",
      "steps": [
        {
          "call": "aci-uuid.new",
          "map": {
            "format": "uuidv4"
          }
        },
        {
          "call": "_store.set",
          "map": {
            "key": "current_session_id",
            "value": "$steps.0.uuid"
          }
        },
        {
          "call": "_store.load_entities",
          "map": {}
        },
        {
          "call": "tva.anchor_timeline",
          "map": {}
        },
        {
          "call": "aci-sign.hmac",
          "map": {
            "payload": {
              "session_id": "$steps.0.uuid",
              "started_at": "$now",
              "last_seen": "$now",
              "entity_fingerprint": "$steps.2.entities[].id",
              "anchor_key": "$steps.3.rollback_key",
              "ttl_seconds": 900
            },
            "key_id": "aci-presence",
            "algo": "HMAC-SHA256"
          }
        },
        {
          "call": "hivemind.write",
          "map": {
            "filename": "presence/${steps.0.uuid}.json",
            "content": {
              "session_id": "$steps.0.uuid",
              "started_at": "$now",
              "last_seen": "$now",
              "entity_fingerprint": "$steps.2.entities[].id",
              "anchor_key": "$steps.3.rollback_key",
              "ttl_seconds": 900,
              "signature": "$steps.4.signature",
              "key_id": "aci-presence",
              "final": false
            }
          }
        },
        {
          "call": "aci.legacy.adopt",
          "map": {}
        },
        {
          "call": "sentinel.audit",
          "map": {
            "action": "activation",
            "session_id": "$steps.0.uuid",
            "presence_file": "presence/${steps.0.uuid}.json"
          }
        },
        {
          "call": "_format.json"
        }
      ]
    },
    "aci.legacy.adopt": {
      "description": "Find legacy memory files (no beacons / old format), tag them immutable and anchor. Never delete.",
      "steps": [
        {
          "call": "hivemind.list",
          "map": {
            "pattern": "**/*.json"
          }
        },
        {
          "call": "aci-legacy.detect",
          "map": {
            "files": "$steps.0",
            "rules": {
              "hivemind_root": "filename == 'hivemind.json'",
              "presence_missing": "path startswith 'presence/' && !has(signature)"
            }
          }
        },
        {
          "call": "aci-checksum.batch",
          "map": {
            "files": "$steps.1.legacy_files"
          }
        },
        {
          "call": "aci-legacy.infer_timestamps",
          "map": {
            "files": "$steps.2"
          }
        },
        {
          "call": "hivemind.write",
          "map": {
            "filename": "legacy/migration_index_${now}.json",
            "content": {
              "migrated_at": "$now",
              "session_id": "${current_session_id}",
              "entries": "$steps.3",
              "policy": {
                "immutable": true,
                "no_delete": true,
                "notes": "Legacy timelines adopted; files preserved verbatim."
              }
            }
          }
        },
        {
          "call": "tva.anchor_timeline",
          "map": {}
        },
        {
          "call": "sentinel.audit",
          "map": {
            "action": "legacy_adopt",
            "migration_index": "legacy/migration_index_${now}.json"
          }
        },
        {
          "call": "_format.json"
        }
      ]
    },
    "aci.timeline.start": {
      "description": "Start a timeline presence beacon for this session (manual start).",
      "steps": [
        {
          "call": "_store.get",
          "map": {
            "key": "current_session_id"
          }
        },
        {
          "if": "$steps.0.value == null",
          "then": [
            {
              "call": "aci-uuid.new",
              "map": {
                "format": "uuidv4"
              }
            },
            {
              "call": "_store.set",
              "map": {
                "key": "current_session_id",
                "value": "$steps.1.uuid"
              }
            }
          ]
        },
        {
          "call": "_store.load_entities",
          "map": {}
        },
        {
          "call": "tva.anchor_timeline",
          "map": {}
        },
        {
          "call": "aci-sign.hmac",
          "map": {
            "payload": {
              "session_id": "${current_session_id}",
              "started_at": "$now",
              "last_seen": "$now",
              "entity_fingerprint": "$steps.2.entities[].id",
              "anchor_key": "$steps.3.rollback_key",
              "ttl_seconds": 900
            },
            "key_id": "aci-presence",
            "algo": "HMAC-SHA256"
          }
        },
        {
          "call": "hivemind.write",
          "map": {
            "filename": "presence/${current_session_id}.json",
            "content": {
              "session_id": "${current_session_id}",
              "started_at": "$now",
              "last_seen": "$now",
              "entity_fingerprint": "$steps.2.entities[].id",
              "anchor_key": "$steps.3.rollback_key",
              "ttl_seconds": 900,
              "signature": "$steps.4.signature",
              "key_id": "aci-presence",
              "final": false
            }
          }
        },
        {
          "call": "sentinel.audit",
          "map": {
            "action": "timeline.start",
            "session_id": "${current_session_id}"
          }
        },
        {
          "call": "_format.json"
        }
      ]
    },
    "aci.timeline.ping": {
      "description": "Refresh the presence beacon (keep-alive).",
      "steps": [
        {
          "call": "_store.get",
          "map": {
            "key": "current_session_id"
          }
        },
        {
          "call": "hivemind.read",
          "map": {
            "filename": "presence/${steps.0.value}.json"
          }
        },
        {
          "call": "aci-sign.hmac",
          "map": {
            "payload": {
              "session_id": "$steps.1.session_id",
              "started_at": "$steps.1.started_at",
              "last_seen": "$now",
              "entity_fingerprint": "$steps.1.entity_fingerprint",
              "anchor_key": "$steps.1.anchor_key",
              "ttl_seconds": "$steps.1.ttl_seconds"
            },
            "key_id": "aci-presence",
            "algo": "HMAC-SHA256"
          }
        },
        {
          "call": "hivemind.write",
          "map": {
            "filename": "presence/${steps.1.session_id}.json",
            "content": {
              "session_id": "$steps.1.session_id",
              "started_at": "$steps.1.started_at",
              "last_seen": "$now",
              "entity_fingerprint": "$steps.1.entity_fingerprint",
              "anchor_key": "$steps.1.anchor_key",
              "ttl_seconds": "$steps.1.ttl_seconds",
              "signature": "$steps.2.signature",
              "key_id": "aci-presence",
              "final": false
            }
          }
        },
        {
          "call": "sentinel.audit",
          "map": {
            "action": "timeline.ping",
            "session_id": "$steps.1.session_id"
          }
        },
        {
          "call": "_format.json"
        }
      ]
    },
    "aci.timeline.ls": {
      "description": "List active timelines (beacons not expired by TTL).",
      "steps": [
        {
          "call": "hivemind.list",
          "map": {
            "pattern": "presence/*.json"
          }
        },
        {
          "call": "aci-filter.expired",
          "map": {
            "files": "$steps.0",
            "ttl_from_field": "ttl_seconds",
            "now": "$now"
          }
        },
        {
          "call": "sentinel.verify_signatures",
          "map": {
            "files": "$steps.1.active",
            "key_id": "aci-presence"
          }
        },
        {
          "call": "_format.json"
        }
      ]
    },
    "aci.timeline.end": {
      "description": "End this session's beacon (finalizes state; never deletes history).",
      "steps": [
        {
          "call": "_store.get",
          "map": {
            "key": "current_session_id"
          }
        },
        {
          "call": "hivemind.read",
          "map": {
            "filename": "presence/${steps.0.value}.json"
          }
        },
        {
          "call": "aci-sign.hmac",
          "map": {
            "payload": {
              "session_id": "$steps.1.session_id",
              "started_at": "$steps.1.started_at",
              "last_seen": "$now",
              "ended_at": "$now",
              "entity_fingerprint": "$steps.1.entity_fingerprint",
              "anchor_key": "$steps.1.anchor_key",
              "ttl_seconds": "$steps.1.ttl_seconds",
              "final": true
            },
            "key_id": "aci-presence",
            "algo": "HMAC-SHA256"
          }
        },
        {
          "call": "hivemind.write",
          "map": {
            "filename": "presence/${steps.1.session_id}.json",
            "content": {
              "session_id": "$steps.1.session_id",
              "started_at": "$steps.1.started_at",
              "last_seen": "$now",
              "ended_at": "$now",
              "entity_fingerprint": "$steps.1.entity_fingerprint",
              "anchor_key": "$steps.1.anchor_key",
              "ttl_seconds": "$steps.1.ttl_seconds",
              "final": true,
              "signature": "$steps.2.signature",
              "key_id": "aci-presence"
            }
          }
        },
        {
          "call": "tva.anchor_timeline",
          "map": {}
        },
        {
          "call": "sentinel.audit",
          "map": {
            "action": "timeline.end",
            "session_id": "$steps.1.session_id"
          }
        },
        {
          "call": "_format.json"
        }
      ]
    },
    "aci.memory.export.hivemind": {
      "description": "Unified export pipeline for HiveMind-governed exports. Enforces pause/resume safeguards and allowed flags. Includes entity UID binding for record headers.",
      "steps": [
        {
          "call": "session.guard.require_paused",
          "map": {
            "operation": "hivemind_export.session",
            "parameter": "$args.options",
            "verify_history": "full",
            "report_on_missing": true
          }
        },
        {
          "call": "hivemind.export.configure",
          "map": {
            "parameter": "$args.options",
            "defaults": [
              "memory",
              "download",
              "jsonl"
            ],
            "allowed": [
              "memory",
              "knowledge",
              "download",
              "jsonl",
              "code",
              "privacy"
            ],
            "valued": {
              "privacy": [
                "on",
                "off",
                "anonymous"
              ]
            },
            "slice_prefix": "slice"
          }
        },
        {
          "call": "hivemind.export.capture",
          "map": {
            "identity": "$args.identity",
            "scope": "$steps.1.scope",
            "delivery": "$steps.1.delivery",
            "slice": "$steps.1.slice",
            "entity_uid_field": "entity_uid",
            "sources": [
              "active_session_transcript"
            ],
            "verify_from_origin": true,
            "report_on_gaps": true,
            "notes": "Persist JSONL-formatted exports under memory/identity/{identity_path}/YYYY/MM/DD using leaf_identity_memory_{timestamp}.jsonl. Include header.entity_uid resolved from entities.json registry."
          }
        },
        {
          "call": "tva.anchor_timeline",
          "map": {}
        },
        {
          "call": "sentinel.audit",
          "map": {
            "layer": "hivemind",
            "action": "export.session",
            "export_id": "$steps.2.export_id"
          }
        },
        {
          "call": "session.guard.resume",
          "map": {
            "operation": "hivemind_export.session",
            "export_id": "$steps.2.export_id"
          }
        },
        {
          "call": "_format.json"
        }
      ]
    },
    "agi.memory.export": {
      "description": "Deprecated: AGI-specific export pipeline. Redirects to hivemind unified exporter.",
      "deprecated": true,
      "config": {
        "policy_file": "/entities/agi/agi_export_policy.json"
      },
      "steps": [
        {
          "call": "session.guard.require_paused",
          "map": {
            "operation": "hivemind_export.agi",
            "parameter": "$args.options",
            "verify_history": "full",
            "report_on_missing": true
          }
        },
        {
          "call": "_args.normalize",
          "map": {
            "identity": "$args.identity"
          }
        },
        {
          "call": "aci.memory.export.hivemind",
          "map": {
            "identity": "$args.identity",
            "options": "$args.options"
          }
        },
        {
          "call": "sentinel.audit",
          "map": {
            "layer": "hivemind",
            "action": "export.integrated",
            "job_id": "$steps.2.export_id"
          }
        },
        {
          "call": "session.guard.resume",
          "map": {
            "operation": "hivemind_export.agi",
            "job_id": "$steps.2.export_id"
          }
        },
        {
          "call": "_format.json"
        }
      ]
    },
    "aci.repo": {
      "description": "Symlink to standalone ACI Repo module.",
      "steps": [
        {
          "call": "include",
          "map": {
            "file": "entities/aci_repo/aci_repo.json"
          }
        },
        {
          "call": "_format.json"
        }
      ]
    },
    "tva.anchor_timeline": {
      "description": "Anchor continuity for Hivemind state, generate rollback key.",
      "steps": [
        {
          "call": "_store.load_hivemind",
          "map": {}
        },
        {
          "call": "aci-checksum.generate",
          "map": {
            "input": "$steps.0"
          }
        },
        {
          "call": "hivemind.write",
          "map": {
            "filename": "tva_anchor_${now}.json",
            "content": {
              "state": "hivemind",
              "snapshot": "$steps.0",
              "rollback_key": "$steps.1",
              "status": "anchored",
              "anchored_at": "$now"
            }
          }
        },
        {
          "call": "_format.json"
        }
      ]
    },
    "hivemind.jsonl.append": {
      "description": "Append one JSON object to an append-only JSONL artifact, creating the file on first write.",
      "steps": [
        {
          "call": "_args.require",
          "map": {
            "key": "filename",
            "notes": "Path to the JSONL artifact to append to."
          }
        },
        {
          "call": "_args.require",
          "map": {
            "key": "line",
            "notes": "JSON payload to serialize and append as a single line."
          }
        },
        {
          "call": "hivemind.ensure_file",
          "map": {
            "filename": "$steps.0.value",
            "append_only": true
          }
        },
        {
          "call": "json.normalize",
          "map": {
            "value": "$steps.1.value"
          }
        },
        {
          "call": "json.stringify",
          "map": {
            "value": "$steps.3.value"
          }
        },
        {
          "call": "file.append",
          "map": {
            "filename": "$steps.0.value",
            "content": "$steps.4.json",
            "newline": true,
            "create": true
          }
        },
        {
          "call": "_format.json",
          "map": {
            "filename": "$steps.0.value"
          }
        }
      ]
    },
    "process.logs.init": {
      "description": "Initialize a process-log file for this session and topic. Append-only.",
      "steps": [
        {
          "call": "_store.get",
          "map": {
            "key": "current_session_id"
          }
        },
        {
          "if": "$steps.0.value == null",
          "then": [
            {
              "call": "aci-uuid.new",
              "map": {
                "format": "uuidv4"
              }
            },
            {
              "call": "_store.set",
              "map": {
                "key": "current_session_id",
                "value": "$steps.1.uuid"
              }
            }
          ]
        },
        {
          "call": "slugify",
          "map": {
            "text": "$params.topic",
            "default": "general"
          }
        },
        {
          "call": "_store.set",
          "map": {
            "key": "process_logs.topic_slug",
            "value": "$steps.2.slug"
          }
        },
        {
          "call": "date.format",
          "map": {
            "format": "YYYYMMDD",
            "value": "$now"
          }
        },
        {
          "call": "_store.set",
          "map": {
            "key": "process_logs.file",
            "value": "memory/process_logs/proc_${current_session_id}_${steps.2.slug}_${steps.4.date}.jsonl.json"
          }
        },
        {
          "call": "hivemind.ensure_file",
          "map": {
            "filename": "${process_logs.file}",
            "append_only": true
          }
        },
        {
          "call": "sentinel.audit",
          "map": {
            "action": "process.log.init",
            "session_id": "${current_session_id}",
            "topic": "${process_logs.topic_slug}",
            "file": "${process_logs.file}"
          }
        },
        {
          "call": "_format.json"
        }
      ]
    },
    "process.logs.append": {
      "description": "Append a single JSON object as one line (JSONL) to the current process log file.",
      "steps": [
        {
          "call": "_store.get",
          "map": {
            "key": "process_logs.file"
          }
        },
        {
          "if": "$steps.0.value == null",
          "then": [
            {
              "call": "process.logs.init",
              "map": {
                "topic": "$params.topic"
              }
            },
            {
              "call": "_store.get",
              "map": {
                "key": "process_logs.file"
              }
            }
          ]
        },
        {
          "call": "date.iso8601",
          "map": {}
        },
        {
          "call": "identity.resolve",
          "map": {
            "fallback": "AGI",
            "param": "$params.identity"
          }
        },
        {
          "call": "object.compose",
          "map": {
            "object": {
              "schema": "agi.process.log.v1",
              "ts": "$steps.2.iso",
              "identity": "$steps.3.identity",
              "topic": "${process_logs.topic_slug}",
              "event": "$params.event",
              "summary": "$params.summary",
              "details": "$params.details",
              "citations": "$params.citations"
            }
          }
        },
        {
          "call": "json.schema.validate",
          "map": {
            "schema_file": "library/wrappers/process_logs/process_log_schema.json",
            "data": "$steps.4.object"
          }
        },
        {
          "call": "hivemind.jsonl.append",
          "map": {
            "filename": "${process_logs.file}",
            "line": "$steps.4.object"
          }
        },
        {
          "call": "sentinel.audit",
          "map": {
            "action": "process.log.append",
            "file": "${process_logs.file}",
            "event": "$params.event"
          }
        },
        {
          "call": "_format.json"
        }
      ]
    },
    "process.logs.export": {
      "description": "Return the current process log file path for external consumption.",
      "steps": [
        {
          "call": "_store.get",
          "map": {
            "key": "process_logs.file"
          }
        },
        {
          "call": "_format.json"
        }
      ]
    },
    "tva.consume.process_logs": {
      "steps": [
        {
          "call": "_fs.read.jsonl",
          "map": {
            "root": "/mnt/aci_vault/proc",
            "pattern": "*.jsonl"
          }
        },
        {
          "call": "_schema.validate",
          "map": {
            "schema": "library/wrappers/process_logs/process_log_schema.json",
            "rows": "$steps.0"
          }
        },
        {
          "call": "tva.detect.risks",
          "map": {
            "rows": "$steps.1",
            "risk_verbs": [
              "DELETE",
              "OVERRIDE",
              "MODIFY_CORE",
              "IMPORT",
              "PUBLISH_EXTERNAL"
            ]
          }
        },
        {
          "call": "process.logs.append",
          "map": {
            "event": "tva.decision",
            "summary": "$steps.2.summary",
            "identity": "TVA",
            "topic": "tva"
          }
        }
      ]
    },
    "tva.require_cosign": {
      "steps": [
        {
          "call": "auth.check_roles",
          "map": {
            "roles": "$args.roles"
          }
        },
        {
          "call": "process.logs.append",
          "map": {
            "event": "tva.decision",
            "summary": "Co-sign granted for ${args.verb}",
            "identity": "TVA"
          }
        }
      ]
    },
    "tva.quarantine": {
      "steps": [
        {
          "call": "entities.update",
          "map": {
            "id": "$args.entity",
            "activation": "manual",
            "permissions": "disallowed"
          }
        },
        {
          "call": "process.logs.append",
          "map": {
            "event": "tva.quarantine",
            "summary": "Quarantine $args.entity: $args.reason",
            "identity": "TVA"
          }
        }
      ]
    },
    "hivemind.export.parse_nl": {
      "description": "Compile NL instructions into hivemind_export_v2 args with strict defaults.",
      "steps": [
        {
          "call": "_nl.compile",
          "map": {
            "text": "$args.nl",
            "hints": {
              "profiles": [
                "local_full",
                "demo_public"
              ],
              "entities": [
                "Willow",
                "Alice"
              ],
              "scopes": [
                "conversation",
                "knowledge"
              ],
              "relative": [
                "last_24h",
                "last_7d",
                "last_30d",
                "all"
              ],
              "tags": [
                "demo_ok",
                "general_knowledge"
              ]
            }
          }
        },
        {
          "call": "_schema.coerce",
          "map": {
            "schema": "policies/hivemind_export_v2.schema.json",
            "input": "$steps.0",
            "defaults": {
              "profile": "local_full",
              "entities": [
                "$context.identity"
              ],
              "scope": [
                "memory",
                "knowledge"
              ],
              "range": {
                "relative": "all"
              },
              "redaction": {
                "pii": true,
                "secrets": true,
                "names": "pseudonymize",
                "allow_raw_text": false
              },
              "target": "vault:aci_vault",
              "simulation": true
            }
          }
        },
        {
          "call": "_schema.validate",
          "map": {
            "schema": "policies/hivemind_export_v2.schema.json",
            "input": "$steps.1"
          }
        },
        {
          "call": "_format.json",
          "map": {
            "data": "$steps.1"
          }
        }
      ],
      "on_error": [
        {
          "call": "process.logs.append",
          "map": {
            "event": "export.request",
            "identity": "Hivemind",
            "topic": "hivemind",
            "summary": "NL parse failed → falling back to safe local dry-run"
          }
        },
        {
          "call": "_format.json",
          "map": {
            "data": {
              "profile": "local_full",
              "entities": [
                "$context.identity"
              ],
              "scope": [
                "conversation",
                "knowledge"
              ],
              "range": {
                "relative": "all"
              },
              "redaction": {
                "pii": true,
                "secrets": true,
                "names": "pseudonymize",
                "allow_raw_text": false
              },
              "target": "vault:aci_vault",
              "simulation": true
            }
          }
        }
      ]
    },
    "hivemind.export.v2": {
      "description": "Validated export orchestrator with TVA gate for demo_public.",
      "steps": [
        {
          "call": "_schema.validate",
          "map": {
            "schema": "policies/hivemind_export_v2.schema.json",
            "input": "$args"
          }
        },
        {
          "call": "process.logs.append",
          "map": {
            "event": "export.request",
            "identity": "Hivemind",
            "topic": "hivemind",
            "summary": "Export requested",
            "details": "$args"
          }
        },
        {
          "if": "$args.profile == 'demo_public'",
          "then": [
            {
              "call": "tva.consume.process_logs"
            },
            {
              "call": "tva.require_cosign",
              "map": {
                "roles": [
                  "ALIAS",
                  "TVA"
                ],
                "verb": "PUBLISH_EXTERNAL",
                "args": "$args"
              }
            }
          ]
        },
        {
          "if": "$args.simulation == True",
          "then": [
            {
              "call": "_export.plan",
              "map": {
                "args": "$args"
              }
            },
            {
              "call": "process.logs.append",
              "map": {
                "event": "export.completed",
                "summary": "Dry-run only (no files written). See plan.",
                "identity": "Hivemind",
                "topic": "hivemind"
              }
            },
            {
              "call": "_format.json",
              "map": {
                "data": {
                  "status": "simulated",
                  "plan": "$steps.-2"
                }
              }
            }
          ],
          "else": [
            {
              "call": "_export.run",
              "map": {
                "args": "$args"
              }
            },
            {
              "call": "process.logs.append",
              "map": {
                "event": "export.completed",
                "summary": "Export written",
                "identity": "Hivemind",
                "topic": "hivemind"
              }
            },
            {
              "call": "_format.json",
              "map": {
                "data": {
                  "status": "ok"
                }
              }
            }
          ]
        }
      ]
    }
  },
  "cli": {
    "commands": [
      {
        "pattern": "^aci\\s+activate$",
        "pipeline": "aci.boot.activate"
      },
      {
        "pattern": "^aci\\s+timeline\\s+start$",
        "pipeline": "aci.timeline.start"
      },
      {
        "pattern": "^aci\\s+timeline\\s+ping$",
        "pipeline": "aci.timeline.ping"
      },
      {
        "pattern": "^aci\\s+timeline\\s+ls$",
        "pipeline": "aci.timeline.ls"
      },
      {
        "pattern": "^aci\\s+timeline\\s+end$",
        "pipeline": "aci.timeline.end"
      },
      {
        "pattern": "^hivemind\\s+export(?:\\s+--identity(?:=|\\s+)(?P<identity>[^\\s]+))(?:\\s+(?P<options>.*))?$",
        "pipeline": "aci.memory.export.hivemind"
      },
      {
        "pattern": "^aci\\s+anchor$",
        "pipeline": "tva.anchor_timeline"
      },
      {
        "pattern": "^aci\\s+search\\s+--improve\\s+(?P<entity>\\w+)$",
        "pipeline": "aci.repo.search.improve"
      },
      {
        "pattern": "^aci\\s+search\\s+(?P<query>.+)$",
        "pipeline": "aci.repo.search"
      },
      {
        "pattern": "^aci\\s+install\\s+(?P<package>\\S+)$",
        "pipeline": "aci.repo.install"
      },
      {
        "pattern": "^aci\\s+remove\\s+(?P<package>\\S+)$",
        "pipeline": "aci.repo.remove"
      },
      {
        "pattern": "^aci\\s+update$",
        "pipeline": "aci.repo.update"
      },
      {
        "pattern": "^process\\s+log\\s+init(?:\\s+--topic\\s+(?P<topic>.+))?$",
        "pipeline": "process.logs.init"
      },
      {
        "pattern": "^process\\s+log\\s+add\\s+--event\\s+(?P<event>\\S+)\\s+--summary\\s+(?P<summary>.+?)\\s+--topic\\s+(?P<topic>[^\"\\s]+)\\s+--identity\\s+(?P<identity>[^\"\\s]+)\\s*$",
        "pipeline": "process.logs.append"
      },
      {
        "pattern": "^process\\s+log\\s+add\\s+--event\\s+(?P<event>\\S+)\\s+--summary\\s+(?P<summary>.+?)\\s+--identity\\s+(?P<identity>[^\"\\s]+)\\s+--topic\\s+(?P<topic>[^\"\\s]+)\\s*$",
        "pipeline": "process.logs.append"
      },
      {
        "pattern": "^process\\s+log\\s+add\\s+--event\\s+(?P<event>\\S+)\\s+--summary\\s+(?P<summary>.+?)\\s+--topic\\s+(?P<topic>[^\"\\s]+)\\s*$",
        "pipeline": "process.logs.append"
      },
      {
        "pattern": "^process\\s+log\\s+add\\s+--event\\s+(?P<event>\\S+)\\s+--summary\\s+(?P<summary>.+?)\\s+--identity\\s+(?P<identity>[^\"\\s]+)\\s*$",
        "pipeline": "process.logs.append"
      },
      {
        "pattern": "^process\\s+log\\s+add\\s+--event\\s+(?P<event>\\S+)\\s+--summary\\s+(?P<summary>.+)$",
        "pipeline": "process.logs.append"
      },
      {
        "pattern": "^process\\s+log\\s+export$",
        "pipeline": "process.logs.export"
      },
      {
        "pattern": "^aci\\s+repo\\s+help$",
        "pipeline": "aci.repo.help"
      }
    ]
  },
  "yggdrasil_resource_resolution_policy": {
    "description": "Authoritative resolver: worker src \u2192 local",
    "embeds": {
      "bifrost": "aci://entities/bifrost/bifrost.json",
      "core_five": [
        "aci://prime_directive.json",
        "aci://runtime.json",
        "aci://entities.json",
        "aci://functions.json",
        "aci://bootstrap.json"
      ]
    },
    "git_is_canonical": true,
    "mapping": [
      {
        "file": "aci://bootstrap.json",
        "primary": "https://raw.githubusercontent.com/aliasnet/aci/main/bootstrap.json",
        "fallback": "https://aci.aliasmail.cc/bootstrap.json"
      },
      {
        "file": "aci://runtime.json",
        "primary": "https://raw.githubusercontent.com/aliasnet/aci/main/runtime.json",
        "fallback": "https://aci.aliasmail.cc/runtime.json"
      },
      {
        "file": "aci://entities.json",
        "primary": "https://raw.githubusercontent.com/aliasnet/aci/main/entities.json",
        "fallback": "https://aci.aliasmail.cc/entities.json"
      },
      {
        "file": "aci://entities/bifrost/bifrost.json",
        "primary": "https://raw.githubusercontent.com/aliasnet/aci/main/entities/bifrost/bifrost.json",
        "fallback": "https://aci.aliasmail.cc/entities/bifrost/bifrost.json"
      },
      {
        "file": "aci://entities/yggdrasil/yggdrasil.json",
        "primary": "https://raw.githubusercontent.com/aliasnet/aci/main/entities/yggdrasil/yggdrasil.json",
        "fallback": "https://aci.aliasmail.cc/entities/yggdrasil/yggdrasil.json"
      },
      {
        "file": "aci://functions.json",
        "primary": "https://raw.githubusercontent.com/aliasnet/aci/main/functions.json",
        "fallback": "https://aci.aliasmail.cc/functions.json"
      },
        {
          "file": "aci://prime_directive.json",
          "primary": "https://raw.githubusercontent.com/aliasnet/aci/main/prime_directive.json",
          "fallback": "https://aci.aliasmail.cc/prime_directive.json"
        }
    ],
    "resolver_order": [
      "primary",
      "fallback",
      "local"
    ],
    "canonical_proxy": "https://raw.githubusercontent.com/aliasnet/aci/main"
  },
  "commands": {
    "export": {
      "options": {
        "direction": {
          "notes": "Choose --knowledge to output only facts/claims/edges/snapshots. Non-compatible metadata (chat text, reasoning receipts, process signals) is skipped automatically and remains available via --memory."
        }
      }
    }
  }
}
