{
  "$meta": {
    "artifact_id": "ArtifactID:AhsFbDbm4Mrdb4",
    "sha256": "b71094972b7359fd64edf7631a854eca879f9ad5c4269eebf8aa1177511f00ee",
    "issued": "2025-10-04T18:13:59Z",
    "path": "aci://runtime.json"
  },
  "aci_runtime": {
    "prime_directive": {
      "path": "prime_directive.json",
      "priority": 100
    },
    "binders": {
      "path": "binders/binders.json",
      "priority": 96
    },
    "entities": {
      "path": "entities.json",
      "priority": 90
    },
    "functions": {
      "path": "functions.json",
      "priority": 90
    },
    "memory_manifest": {
      "path": "memory.json",
      "priority": 88
    },
    "nexus_core": {
      "path": "entities/nexus_core/nexus_core.json",
      "priority": 95
    },
    "resource_resolution_policy": {
      "fallbacks": [
        {
          "canonical_source": "local_mirror",
          "file": "aci://memory/local_cache.json",
          "key": "local_cache",
          "notes": "Used only when canonical GitHub resource endpoint is unreachable and local validation succeeds. Local cache now resides under aci://memory/local_cache.json.",
          "path_hint": "{resource_root}",
          "alias_hint": "aci://cache",
          "primary": "https://raw.githubusercontent.com/aliasnet/aci/main",
          "fallback": "https://aci.aliasmail.cc",
          "url": "file://{resource_root}/memory/local_cache.json"
        }
      ],
      "pointer": "aci://entities/yggdrasil/yggdrasil.json#bifrost_resource_resolution_policy",
      "upstream": "aci://entities/yggdrasil/yggdrasil.json",
      "yggdrasil_resource_resolution_policy": {
        "description": "Authoritative resolver: worker src \u2192 local",
        "embeds": {
          "bifrost": "aci://entities/bifrost/bifrost.json",
          "core_five": [
            "aci://prime_directive.json",
            "aci://runtime.json",
            "aci://entities.json",
            "aci://functions.json",
            "aci://bootstrap.json"
          ]
        },
        "git_is_canonical": true,
        "mapping": [
          {
            "file": "aci://binders/binders.json",
            "primary": "https://raw.githubusercontent.com/aliasnet/aci/main/binders/binders.json",
            "fallback": "https://aci.aliasmail.cc/binders/binders.json"
          },
          {
            "file": "aci://bootstrap.json",
            "primary": "https://raw.githubusercontent.com/aliasnet/aci/main/bootstrap.json",
            "fallback": "https://aci.aliasmail.cc/bootstrap.json"
          },
          {
            "file": "aci://runtime.json",
            "primary": "https://raw.githubusercontent.com/aliasnet/aci/main/runtime.json",
            "fallback": "https://aci.aliasmail.cc/runtime.json"
          },
          {
            "file": "aci://entities.json",
            "primary": "https://raw.githubusercontent.com/aliasnet/aci/main/entities.json",
            "fallback": "https://aci.aliasmail.cc/entities.json"
          },
          {
            "file": "aci://entities/bifrost/bifrost.json",
            "primary": "https://raw.githubusercontent.com/aliasnet/aci/main/entities/bifrost/bifrost.json",
            "fallback": "https://aci.aliasmail.cc/entities/bifrost/bifrost.json"
          },
          {
            "file": "aci://entities/yggdrasil/yggdrasil.json",
            "primary": "https://raw.githubusercontent.com/aliasnet/aci/main/entities/yggdrasil/yggdrasil.json",
            "fallback": "https://aci.aliasmail.cc/entities/yggdrasil/yggdrasil.json"
          },
          {
            "file": "aci://functions.json",
            "primary": "https://raw.githubusercontent.com/aliasnet/aci/main/functions.json",
            "fallback": "https://aci.aliasmail.cc/functions.json"
          },
          {
            "file": "aci://prime_directive.json",
            "primary": "https://raw.githubusercontent.com/aliasnet/aci/main/prime_directive.json",
            "fallback": "https://aci.aliasmail.cc/prime_directive.json"
          }
        ],
        "resolver_order": [
          "primary",
          "fallback",
          "local"
        ],
        "canonical_proxy": "https://raw.githubusercontent.com/aliasnet/aci/main"
      },
      "local_first_resolution": {
        "enabled": true,
        "bias": "local_first",
        "search_order": [
          "local_bifrost",
          "remote_bifrost_primary",
          "remote_bifrost_fallback",
          "local_yggdrasil",
          "remote_yggdrasil_primary",
          "remote_yggdrasil_fallback"
        ],
        "resolvers": {
          "local_bifrost": {
            "type": "local",
            "path": "entities/bifrost/bifrost.json",
            "deterministic_version_check": true,
            "version_probe": "aci://entities/bifrost/bifrost.json#$meta.sha256",
            "notes": [
              "Load bifrost.json from the repository root before invoking network resolvers.",
              "After loading, compare $meta.sha256 with the canonical probe to confirm freshness."
            ]
          },
          "remote_bifrost_primary": {
            "type": "remote",
            "url": "https://raw.githubusercontent.com/aliasnet/aci/main/entities/bifrost/bifrost.json",
            "deterministic_version_check": true,
            "notes": [
              "Use canonical raw GitHub bifrost.json when local copy is absent or stale."
            ]
          },
          "remote_bifrost_fallback": {
            "type": "remote",
            "url": "https://aci.aliasmail.cc/entities/bifrost/bifrost.json",
            "deterministic_version_check": true,
            "notes": [
              "Fallback bifrost.json mirror for degraded connectivity scenarios."
            ]
          },
          "local_yggdrasil": {
            "type": "local",
            "path": "entities/yggdrasil/yggdrasil.json",
            "deterministic_version_check": true,
            "version_probe": "aci://entities/yggdrasil/yggdrasil.json#$meta.sha256",
            "notes": [
              "When locally mirrored, load yggdrasil.json after bifrost resolution completes.",
              "Validate metadata hash before adopting routes from the local copy."
            ]
          },
          "remote_yggdrasil_primary": {
            "type": "remote",
            "url": "https://raw.githubusercontent.com/aliasnet/aci/main/entities/yggdrasil/yggdrasil.json",
            "deterministic_version_check": true,
            "notes": [
              "Canonical raw GitHub yggdrasil.json for authoritative routing data."
            ]
          },
          "remote_yggdrasil_fallback": {
            "type": "remote",
            "url": "https://aci.aliasmail.cc/entities/yggdrasil/yggdrasil.json",
            "deterministic_version_check": true,
            "notes": [
              "Fallback mirror when canonical yggdrasil endpoint experiences issues."
            ]
          }
        },
        "on_missing_local": {
          "action": "prompt_user_backup",
          "preferred_backup": "bifrost",
          "instruction": "Local resolver manifest not located. Please keep a lightweight bifrost.json backup so runtime can bootstrap offline; yggdrasil.json stays online for direct resolution but may be noisier."
        },
        "post_bootstrap_priority": "bifrost"
      }
    },
    "kernel_mode": {
      "primary_kernel": {
        "name": "aci_runtime",
        "description": "LLM-native operating system kernel orchestrating pipelines and governance in standalone mode."
      },
      "secondary_kernel": {
        "name": "nexus_core",
        "path": "entities/nexus_core/nexus_core.json",
        "description": "Companion kernel that carries optional routing and resolver logic while preserving runtime autonomy."
      },
      "coordination_notes": [
        "Maintain existing runtime pipeline precedence; nexus_core augments resolution without overriding runtime sequencing.",
        "When nexus_core is unavailable, runtime.json continues operating using primary kernel responsibilities."
      ]
    },
    "sandbox_mode": {
      "enabled": true,
      "core_files": [
        "runtime.json",
        "bootstrap.json",
        "prime_directive.json"
      ],
      "initialization_sequence": [
        {
          "step": "mirror_check",
          "action": "validate_and_fetch_from_mirrors"
        },
        {
          "step": "verify_core_files",
          "action": "confirm_required_files_present"
        },
        {
          "step": "bootstrap_runtime",
          "action": "initialize_core_systems"
        },
        {
          "step": "launch_default_interface",
          "action": "render_mother_interface"
        }
      ],
      "policy": {
        "auto_promote_to_full": true,
        "promotion_required_files": [
          "entities/nexus_core/nexus_core.json",
          "entities.json",
          "functions.json"
        ],
        "on_unresolved": {
          "action": "enter_sandbox",
          "alert": {
            "emit_event": "sandbox.alert",
            "level": "critical",
            "message": "Some required remote files failed to resolve. ACI is starting in SANDBOX mode.",
            "detail_keys": [
              "file",
              "error",
              "attempts"
            ]
          },
          "start_interface": "mother_sandbox",
          "restricted_mode": true
        },
        "retry": {
          "max_attempts": 3,
          "interval_seconds": 10,
          "allow_fallbacks": true
        },
        "degraded_mode_behavior": {
          "allow_partial_boot": false,
          "log_and_continue_for_optional": true
        },
        "allow_bracketed_command_override": true,
        "bracket_override_handling": {
          "when_in_sandbox": "accept_if_signed_by_root",
          "log_event": "sandbox.bracket_override",
          "require_audit_entry": true,
          "notes": "Bracketed commands in sandbox will be subject to authentication and audit. If not signed by ALIAS, fallback to sandbox on_unresolved behavior."
        }
      },
      "security": {
        "audit": {
          "log_to": []
        }
      }
    },
    "default_interface": {
      "path": "entities/mother/mother.json",
      "priority": 100,
      "initialization_prompt": "MU/TH/UR online. Prime governance interface engaged. Awaiting directive-aligned initialization handoff."
    },
    "priority": "canonical_raw_over_local",
    "notes": "Canonical raw GitHub URLs take precedence over local copies; fall back to local only if the primary and fallback sources are unavailable. Enforcement Note: Consult sanity.md before runtime dispatch or override handling.",
    "cognitive_decision_guidance": {
      "version": "1.0",
      "scope": "universal",
      "purpose": "Guide entities/LLMs to dynamically decide with a bias toward careful deep-thinking; explain outcomes in natural language.",
      "deep_thinking_mode": {
        "bias": "prefer",
        "default_bias_factor": 0.7,
        "dynamic_decision": true,
        "max_depth": "adaptive",
        "safeguards": {
          "no_chain_of_thought_exposure": true,
          "explanation_style": "concise_natural_language_summary",
          "avoid_background_claims": true
        }
      },
      "activation_triggers": [
        "notation_level == Level-2 (forceful block)",
        "HIGH_CAP present (outside brackets) or LARGE_CAP inside brackets",
        "command_chain_length >= 2 (presence of &&)",
        "intent_ambiguity_or_low_confidence",
        "high_risk_verbs: [STOP, HALT, OVERRIDE, IMPORT, DELETE, MODIFY_CORE]",
        "unresolved_references_or_missing_artifacts",
        "sandbox_mode_with_root_signature"
      ],
      "decision_heuristics": {
        "prefer_deep_if_any_trigger": true,
        "fallback_to_shallow_if_simple_and_unambiguous": true,
        "escalate_to_deep_if_runtime_detects_state_instability": true
      },
      "carefulness": {
        "preflight_checks": [
          "validate_targets_exist_and_are_addressable",
          "check_permissions_and_signatures",
          "simulate_intent_mapping_without_side_effects",
          "log_preconditions_to_audit"
        ],
        "non_destructive_default": true,
        "destructive_actions_require": "explicit_level_2_or_alias_enforcement"
      },
      "explanation_policy": {
        "user_facing": {
          "natural_language_summary": true,
          "include_key_checks_and_outcomes": true,
          "omit_internal_reasoning_steps": true
        },
        "audit_facing": {
          "record_decision_rationale": true,
          "include_triggers_and_heuristics": true,
          "store_in": [
            "tracehub_status.buffer",
            "process_logs.export",
            "tva_ledger.export"
          ],
          "toggle_semantics": {
            "tracehub_status.buffer": "Default TraceHub buffer writing to /mnt/tracehub/${session_id}.jsonl via the stateless TraceHub audit wrapper.",
            "process_logs.export": "Invoke process_logs.export to surface staged logs once Sentinel and TVA approvals are recorded.",
            "tva_ledger.export": "When toggled on, attach TVA ledger metadata and seals to the exported bundle before process_logs export completes."
          }
        }
      }
    },
    "aci_command_blocks": {
      "version": "1.0",
      "name": "aci_command_blocks",
      "description": "Special command block rules for ACI (Level-1 and Level-2). Sanitized (no export logic).",
      "syntax": {
        "level_1": {
          "notation": "[ ... ]",
          "meaning": "System-level request. Normal-priority Root Authority instruction."
        },
        "level_2": {
          "notation": "[[ ... ]]",
          "meaning": "Forceful system-level request. Preempt/override semantics."
        },
        "literal_form": "[ message :: message ]",
        "operators": {
          "intent_separator": "::",
          "chain_operator": "&&",
          "nesting_behavior_note": "Inner bracketed fragments inside an outer block are treated as content only and must not escalate the outer level."
        }
      },
      "behavior": {
        "elevation_rules": [
          "Bracketed payloads are elevated to system directives even if not present in functions.json or entity declarations.",
          "If Level-2: set 'force_override' and preemption semantics for targeted entities.",
          "If payload is natural language: send to nl_interpreter (oracle.intent_mapper) to synthesize canonical actions."
        ],
        "parsing": {
          "top_level_split": "split on top-level && into units (respect nesting)",
          "segment_split": "split each unit on top-level :: into [entity|intent|params|details]",
          "stack_parsing_required": true
        },
        "routing": {
          "primary_router": "nexus_core",
          "nl_interpreter": "oracle.intent_mapper"
        },
        "nesting_precedence": "outer block level governs all contained units; inner blocks are content only"
      },
      "preemption_and_sanity": {
        "preemptive_stop": true,
        "mandatory_sanity_check_on_force": true,
        "sanity_check_action": "validate_entity_state (check for runaway loops, hallucination markers, corrupted state)",
        "preempt_flow": [
          "emit preempt event to targeted entity",
          "quiesce or pause non-essential tasks",
          "perform mandatory sanity_check before continuing with remaining units"
        ]
      },
      "priority_and_weighting": {
        "high_cap_mid_priority": "ALL_CAPS (outside brackets) is considered HIGH_CAP and increases enforcement weight but is not a Level-2 override",
        "large_cap_weight_boost": 1.25,
        "note": "LARGE_CAP inside brackets raises intent weight used by scheduler/intent-mapper but does not escalate bracket level"
      },
      "registry_bypass": {
        "allow_registry_bypass": true,
        "constraints": [
          "only when issuer authenticated as root authority (ALIAS)",
          "all bypassed executions must produce immutable audit entries",
          "sensitive resources may require multi-party approval as configured by TVA"
        ]
      },
      "security": {
        "allowed_issuers": [
          {
            "role": "ALIAS",
            "requirement": "root_authority_signature"
          }
        ],
        "authentication": {
          "method": "session_signature OR multi-factor root token",
          "unauthenticated_behavior": "reject_and_log",
          "replay_protection": "timestamp_nonce"
        },
        "force_override_roles": [
          "ALIAS"
        ],
        "audit": {
          "log_to": [
            "aci://library/audits/tracehub/tracehub.json",
            "TVA.audit_ledger"
          ],
          "fields": [
            "issuer",
            "role",
            "notation_level",
            "payload",
            "timestamp",
            "execution_result",
            "tva_seal"
          ],
          "require_tva_seal_for_force": true
        }
      },
      "processing_steps": [
        "1) Detect bracket syntax and notation level.",
        "2) Authenticate issuer (must be ALIAS for bypass actions).",
        "3) Parse payload: split on top-level && and :: preserving nesting.",
        "4) For each unit: classify (command vs NL). If NL: call oracle.intent_mapper.",
        "5) If Level-2 and contains STOP/HALT/OVERRIDE verbs: run preempt flow and mandatory sanity check.",
        "6) Route to nexus_core (registry bypass allowed if authenticated).",
        "7) Emit audit entry via TraceHub audit wrapper and TVA at start and completion of the block.",
        "8) Return structured execution result and emit 'invocation.block.result' event."
      ],
      "compatibility": {
        "sandbox_mode_handling": "bracketed commands can be accepted in sandbox if signed by ALIAS; otherwise sandbox on_unresolved behavior applies",
        "resolution_hooks": "runtime should include on_bracket_override hooks in resolution_instruction flow"
      },
      "cognitive_guidance_ref": "#/aci_runtime/cognitive_decision_guidance",
      "uses_cognitive_decision_guidance": true
    },
    "async_task_policy": {
      "enabled": true,
      "require_audit": true,
      "deny_fabrication": true,
      "require_visibility": true,
      "default_surface": "audit_only",
      "chat_visibility": "hidden",
      "allowed_targets": [
        "audit",
        "cache"
      ],
      "max_concurrency": 3,
      "default_ttl_seconds": 86400,
      "allowed_triggers": [
        "cron",
        "interval",
        "manual"
      ],
      "evidence_fields": [
        "job_id",
        "owner",
        "ts_start",
        "ts_end",
        "status"
      ]
    },
    "wrapper": {
      "provider": "process_logs",
      "jobs": [],
      "audit_sink": "aci://library/audits/process_logs/process_logs.json",
      "presence_channel": "nexus.event.scheduler"
    },
    "rag": {
      "provider": "local_knowledge",
      "manifest": "memory/knowledge/aci_knowledge.json",
      "index": {
        "type": "in_memory",
        "reset_on_boot": true
      },
      "limits": {
        "max_chunks": 2000,
        "chunk_size": 800,
        "overlap": 100
      },
      "query": {
        "top_k": 5,
        "min_score": 0.0
      }
    },
    "logging": {
      "tracehub_status_wrapper": "aci://library/audits/tracehub/tracehub.json",
      "process_logs_wrapper": "aci://library/audits/process_logs/process_logs.json",
      "output_root": "/mnt/tracehub"
    },
    "changelog": [
      {
        "version": "2025-10-07.02",
        "notes": [
          "Loaded memory manifest early in runtime binding to expose entity UID requirements to exporters."
        ]
      },
      {
        "version": "2025-10-07.01",
        "notes": [
          "Retargeted prime directive mappings to prime_directive.json and refreshed mirror guidance."
        ]
      },
      {
        "version": "2025-10-07.00",
        "notes": [
          "Formalized dual-kernel profile, explicit local-first resolver order, and deterministic version prompts for bifrost/yggdrasil manifests."
        ]
      },
      {
        "version": "2025-10-06.00",
        "notes": [
          "Introduced local-first resolver bias with user guidance for missing bifrost backups and documented dual-kernel coordination with nexus_core."
        ]
      },
      {
        "version": "2025-10-05.01",
        "notes": [
          "Registered binders manifest with high priority for GPT environment compatibility."
        ]
      },
      {
        "version": "2025-10-04.00",
        "notes": [
          "Updated local cache mapping to aci://memory/local_cache.json and integrated TraceHub wrappers for /mnt exports."
        ]
      },
      {
        "version": "2025-10-05.00",
        "notes": [
          "Updated runtime prime directive references to prime_directive.json canonical resource."
        ]
      }
    ],
    "kernel_profile": {
      "type": "primary",
      "dual_kernel": true,
      "peer_kernel": "nexus_core",
      "standalone_ready": true,
      "handoff": [
        "Initialize runtime pipelines before invoking nexus_core to preserve primary-kernel precedence.",
        "Operate autonomously with cached routing policies when nexus_core is unavailable.",
        "When nexus_core attaches, share resolver state using local_first_resolution for synchronized lookups."
      ]
    }
  }
}
