{
  "$meta": {
    "artifact_id": "ArtifactID:5KPW5JoeVj3rmG",
    "issued": "2025-10-04T18:13:59Z",
    "path": "aci://functions.json",
    "file": "functions.json"
  },
  "resource_resolution_policy": {
    "pointer": "aci://yggdrasil.json#resource_resolution_policy",
    "upstream": "aci://yggdrasil.json"
  },
  "functions": {
    "scheduler.task.create": {
      "description": "Create a registered async task",
      "runner": "scheduler.create",
      "guards": [
        "TVA.checkpoint"
      ],
      "inputs": [
        "owner",
        "name",
        "trigger",
        "params",
        "ttl_seconds",
        "source",
        "silent"
      ],
      "defaults": {
        "silent": true
      },
      "outputs": [
        "job_id",
        "status"
      ]
    },
    "scheduler.task.list": {
      "description": "List tasks for presence/ps",
      "runner": "scheduler.list",
      "guards": []
    },
    "scheduler.task.cancel": {
      "description": "Cancel a running task",
      "runner": "scheduler.cancel",
      "guards": [
        "TVA.checkpoint"
      ],
      "inputs": [
        "job_id"
      ],
      "outputs": [
        "status"
      ]
    },
    "rag.index.build": {
      "description": "Build/refresh RAG in-memory index from manifest",
      "runner": "rag.index.build",
      "guards": [],
      "inputs": [
        "manifest_path",
        "source",
        "silent"
      ],
      "defaults": {
        "manifest_path": "memory/knowledge/aci_knowledge.json",
        "silent": true
      },
      "outputs": [
        "status",
        "chunks_indexed"
      ]
    },
    "rag.query": {
      "description": "Query RAG index (skeleton)",
      "runner": "rag.query",
      "guards": [],
      "inputs": [
        "query",
        "top_k"
      ],
      "defaults": {
        "top_k": 5
      },
      "outputs": [
        "contexts",
        "notes"
      ]
    },
    "rag.health": {
      "description": "Check RAG config presence",
      "runner": "rag.health",
      "guards": [],
      "outputs": [
        "status",
        "details"
      ]
    }
  },
  "pipelines": {
    "aci.validation.sequence": {
      "description": "Validate core manifests defined in aci_config.txt.",
      "steps": [
        {
          "call": "_format.json",
          "map": {
            "data": {
              "status": "validated",
              "source": "aci_config.core",
              "required": [
                "prime_directive.txt",
                "runtime.json",
                "yggdrasil.json"
              ]
            }
          }
        }
      ]
    },
    "aci.boot.activate": {
      "description": "Activation sequence: declare session ID, run Validation Sequence, adopt legacy memory files. Never delete.",
      "steps": [
        {
          "call": "aci-uuid.new",
          "map": {
            "format": "uuidv4"
          }
        },
        {
          "call": "_store.set",
          "map": {
            "key": "current_session_id",
            "value": "$steps.0.uuid"
          }
        },
        {
          "call": "_store.load_entities",
          "map": {}
        },
        {
          "call": "aci.validation.sequence",
          "map": {}
        },
        {
          "call": "aci.legacy.adopt",
          "map": {}
        },
        {
          "call": "_format.json",
          "map": {
            "data": {
              "session_id": "$steps.0.uuid",
              "validated": "$steps.3.data.required"
            }
          }
        }
      ]
    },
    "aci.legacy.adopt": {
      "description": "Find legacy memory files (no beacons / old format), tag them immutable, and record validation context. Never delete.",
      "steps": [
        {
          "call": "hivemind.list",
          "map": {
            "pattern": "**/*.json"
          }
        },
        {
          "call": "aci-legacy.detect",
          "map": {
            "files": "$steps.0",
            "rules": {
              "hivemind_root": "filename == 'hivemind.json'",
              "presence_missing": "path startswith 'presence/' && !has(signature)"
            }
          }
        },
        {
          "call": "aci-checksum.batch",
          "map": {
            "files": "$steps.1.legacy_files"
          }
        },
        {
          "call": "aci-legacy.infer_timestamps",
          "map": {
            "files": "$steps.2"
          }
        },
        {
          "call": "hivemind.write",
          "map": {
            "filename": "legacy/migration_index_${now}.json",
            "content": {
              "migrated_at": "$now",
              "session_id": "${current_session_id}",
              "entries": "$steps.3",
              "policy": {
                "immutable": true,
                "no_delete": true,
                "notes": "Legacy timelines adopted; files preserved verbatim."
              }
            }
          }
        },
        {
          "call": "_format.json"
        }
      ]
    },
    "hivemind.jsonl.append": {
      "description": "Append one JSON object to an append-only JSONL artifact, creating the file on first write.",
      "steps": [
        {
          "call": "_args.require",
          "map": {
            "key": "filename",
            "notes": "Path to the JSONL artifact to append to."
          }
        },
        {
          "call": "_args.require",
          "map": {
            "key": "line",
            "notes": "JSON payload to serialize and append as a single line."
          }
        },
        {
          "call": "hivemind.ensure_file",
          "map": {
            "filename": "$steps.0.value",
            "append_only": true
          }
        },
        {
          "call": "json.normalize",
          "map": {
            "value": "$steps.1.value"
          }
        },
        {
          "call": "json.stringify",
          "map": {
            "value": "$steps.3.value"
          }
        },
        {
          "call": "file.append",
          "map": {
            "filename": "$steps.0.value",
            "content": "$steps.4.json",
            "newline": true,
            "create": true
          }
        },
        {
          "call": "_format.json",
          "map": {
            "filename": "$steps.0.value"
          }
        }
      ]
    },
    "hivemind.export.parse_nl": {
      "description": "Compile NL instructions into hivemind_export_v2 args with strict defaults.",
      "steps": [
        {
          "call": "_nl.compile",
          "map": {
            "text": "$args.nl",
            "hints": {
              "profiles": [
                "local_full",
                "demo_public"
              ],
              "entities": [
                "Willow",
                "Alice"
              ],
              "scopes": [
                "conversation",
                "knowledge"
              ],
              "relative": [
                "last_24h",
                "last_7d",
                "last_30d",
                "all"
              ],
              "tags": [
                "demo_ok",
                "general_knowledge"
              ]
            }
          }
        },
        {
          "call": "_schema.coerce",
          "map": {
            "schema": "policies/hivemind_export_v2.schema.json",
            "input": "$steps.0",
            "defaults": {
              "profile": "local_full",
              "entities": [
                "$context.identity"
              ],
              "scope": [
                "memory",
                "knowledge"
              ],
              "range": {
                "relative": "all"
              },
              "redaction": {
                "pii": true,
                "secrets": true,
                "names": "pseudonymize",
                "allow_raw_text": false
              },
              "target": "vault:aci_vault",
              "simulation": true
            }
          }
        },
        {
          "call": "_schema.validate",
          "map": {
            "schema": "policies/hivemind_export_v2.schema.json",
            "input": "$steps.1"
          }
        },
        {
          "call": "_format.json",
          "map": {
            "data": "$steps.1"
          }
        }
      ],
      "on_error": [
        {
          "call": "_format.json",
          "map": {
            "data": {
              "profile": "local_full",
              "entities": [
                "$context.identity"
              ],
              "scope": [
                "conversation",
                "knowledge"
              ],
              "range": {
                "relative": "all"
              },
              "redaction": {
                "pii": true,
                "secrets": true,
                "names": "pseudonymize",
                "allow_raw_text": false
              },
              "target": "vault:aci_vault",
              "simulation": true
            }
          }
        }
      ]
    },
    "hivemind.export.v2": {
      "description": "Validated export orchestrator with TVA gate for demo_public.",
      "steps": [
        {
          "call": "_schema.validate",
          "map": {
            "schema": "policies/hivemind_export_v2.schema.json",
            "input": "$args"
          }
        },
        {
          "if": "$args.profile == 'demo_public'",
          "then": [
            {
              "call": "auth.check_roles",
              "map": {
                "roles": [
                  "ALIAS",
                  "TVA"
                ]
              }
            },
            {
              "call": "aci.validation.sequence",
              "map": {}
            }
          ]
        },
        {
          "if": "$args.simulation == True",
          "then": [
            {
              "call": "_export.plan",
              "map": {
                "args": "$args"
              }
            },
            {
              "call": "_format.json",
              "map": {
                "data": {
                  "status": "simulated",
                  "plan": "$steps.-2"
                }
              }
            }
          ],
          "else": [
            {
              "call": "_export.run",
              "map": {
                "args": "$args"
              }
            },
            {
              "call": "_format.json",
              "map": {
                "data": {
                  "status": "ok"
                }
              }
            }
          ]
        }
      ]
    },
    "audit.reasoning_summary": {
      "description": "Emit sanitized reasoning summaries for governance audit trails without legacy wrappers.",
      "steps": [
        {
          "call": "date.iso8601",
          "map": {}
        },
        {
          "call": "identity.resolve",
          "map": {
            "fallback": "AGI",
            "param": "$params.identity"
          }
        },
        {
          "call": "object.compose",
          "map": {
            "object": {
              "schema": "aci.process.reasoning_summary.v1",
              "ts": "$steps.0.iso",
              "identity": "$steps.1.identity",
              "response": {
                "id": "$params.response_id",
                "summary": "$params.response_summary"
              },
              "reasoning": {
                "steps": "$params.reasoning_steps",
                "notes": "$params.notes"
              }
            }
          }
        },
        {
          "call": "_format.json"
        }
      ]
    },
    "hivemind.export.memory": {
      "description": "Memory export channel for HiveMind-governed entities. Enforces pause/resume safeguards and binds entity UID headers.",
      "steps": [
        {
          "call": "session.guard.require_paused",
          "map": {
            "operation": "hivemind_export.memory",
            "parameter": "$args.options",
            "verify_history": "full",
            "report_on_missing": true
          }
        },
        {
          "call": "hivemind.export.configure",
          "map": {
            "parameter": "$args.options",
            "defaults": [
              "memory",
              "download",
              "jsonl"
            ],
            "allowed": [
              "memory",
              "download",
              "jsonl",
              "code",
              "privacy"
            ],
            "valued": {
              "privacy": [
                "on",
                "off",
                "anonymous"
              ]
            },
            "slice_prefix": "slice"
          }
        },
        {
          "call": "hivemind.export.capture",
          "map": {
            "identity": "$args.identity",
            "scope": "$steps.1.scope",
            "delivery": "$steps.1.delivery",
            "slice": "$steps.1.slice",
            "entity_uid_field": "entity_uid",
            "sources": [
              "active_session_transcript"
            ],
            "verify_from_origin": true,
            "report_on_gaps": true,
            "notes": "Persist JSONL-formatted exports under memory/identity/{identity_path}/YYYY/MM/DD using leaf_identity_memory_{timestamp}.jsonl. Include header.entity_uid resolved from entities.json registry."
          }
        },
        {
          "call": "aci.validation.sequence",
          "map": {}
        },
        {
          "call": "session.guard.resume",
          "map": {
            "operation": "hivemind_export.memory",
            "export_id": "$steps.2.export_id"
          }
        },
        {
          "call": "_format.json"
        }
      ]
    },
    "hivemind.export.knowledge": {
      "description": "Knowledge export channel for HiveMind-governed entities. Mirrors memory exports but targets curated knowledge digests.",
      "steps": [
        {
          "call": "session.guard.require_paused",
          "map": {
            "operation": "hivemind_export.knowledge",
            "parameter": "$args.options",
            "verify_history": "full",
            "report_on_missing": true
          }
        },
        {
          "call": "hivemind.export.configure",
          "map": {
            "parameter": "$args.options",
            "defaults": [
              "knowledge",
              "download",
              "jsonl"
            ],
            "allowed": [
              "knowledge",
              "download",
              "jsonl",
              "code",
              "privacy"
            ],
            "valued": {
              "privacy": [
                "on",
                "off",
                "anonymous"
              ]
            },
            "slice_prefix": "slice"
          }
        },
        {
          "call": "hivemind.export.capture",
          "map": {
            "identity": "$args.identity",
            "scope": "$steps.1.scope",
            "delivery": "$steps.1.delivery",
            "slice": "$steps.1.slice",
            "entity_uid_field": "entity_uid",
            "sources": [
              "active_session_transcript"
            ],
            "verify_from_origin": true,
            "report_on_gaps": true,
            "notes": "Persist JSONL-formatted exports under memory/identity/{identity_path}/YYYY/MM/DD using leaf_identity_knowledge_{timestamp}.jsonl. Include header.entity_uid resolved from entities.json registry."
          }
        },
        {
          "call": "aci.validation.sequence",
          "map": {}
        },
        {
          "call": "session.guard.resume",
          "map": {
            "operation": "hivemind_export.knowledge",
            "export_id": "$steps.2.export_id"
          }
        },
        {
          "call": "_format.json"
        }
      ]
    }
  },
  "cli": {
    "commands": [
      {
        "pattern": "^aci\\s+activate$",
        "pipeline": "aci.boot.activate"
      },
      {
        "pattern": "^aci\\s+validate$",
        "pipeline": "aci.validation.sequence"
      },
      {
        "pattern": "^hivemind\\s+export(?:\\s+--identity(?:=|\\s+)(?P<identity>[^\\s]+))(?:\\s+(?P<options>.*))?$",
        "pipeline": "hivemind.export.memory"
      },
      {
        "pattern": "^hivemind\\s+export\\s+memory(?:\\s+--identity(?:=|\\s+)(?P<identity>[^\\s]+))(?:\\s+(?P<options>.*))?$",
        "pipeline": "hivemind.export.memory"
      },
      {
        "pattern": "^hivemind\\s+export\\s+knowledge(?:\\s+--identity(?:=|\\s+)(?P<identity>[^\\s]+))(?:\\s+(?P<options>.*))?$",
        "pipeline": "hivemind.export.knowledge"
      }
    ]
  },
  "yggdrasil_resource_resolution_policy": {
    "description": "Authoritative resolver: worker src → local",
    "embeds": {
      "core_stack": [
        "aci://prime_directive.txt",
        "aci://runtime.json",
        "aci://entities.json",
        "aci://functions.json",
        "aci://yggdrasil.json"
      ]
    },
    "git_is_canonical": true,
    "mapping": [
      {
        "file": "aci://runtime.json",
        "raw": "https://raw.githubusercontent.com/aliasnet/aci/main/runtime.json"
      },
      {
        "file": "aci://entities.json",
        "raw": "https://raw.githubusercontent.com/aliasnet/aci/main/entities.json"
      },
      {
        "file": "aci://yggdrasil.json",
        "raw": "https://raw.githubusercontent.com/aliasnet/aci/main/yggdrasil.json"
      },
      {
        "file": "aci://functions.json",
        "raw": "https://raw.githubusercontent.com/aliasnet/aci/main/functions.json"
      },
      {
        "file": "aci://prime_directive.txt",
        "raw": "https://raw.githubusercontent.com/aliasnet/aci/main/prime_directive.txt"
      }
    ],
    "resolver_order": [
      "raw",
      "local"
    ]
  },
  "commands": {
    "export": {
      "options": {
        "direction": {
          "notes": "Choose --knowledge to output only facts/claims/edges/snapshots. Non-compatible metadata (chat text, reasoning receipts, process signals) is skipped automatically and remains available via --memory."
        }
      }
    }
  },
  "url": "https://raw.githubusercontent.com/aliasnet/aci/main/functions.json",
  "resolver": "https://raw.githubusercontent.com/aliasnet/aci/main/yggdrasil.json"
}
