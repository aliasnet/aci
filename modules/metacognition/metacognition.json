{
  "$meta": {
    "artifact_id": "ArtifactID:7hcCGgh2qdR9Bi",
    "sha256": "90971b349d97860642f793d106b6a7155707c0dc63bfdc4684984a3f9aaf2e5d",
    "issued": "2025-10-04T18:13:59Z",
    "path": "aci://modules/metacognition/metacognition.json"
  },
  "$schema": "/schemas/metacognition-module-1.json",
  "module": {
    "id": "aci.metacog.wrapper",
    "name": "MetacognitiveWrapper",
    "version": "1.2.0",
    "description": "Stateless, hookable metacognitive wrapper providing monitoring, calibration, selective prediction (accept/revise/abstain/escalate), a consciousness-inspired global workspace summary, integrated conformal abstention, and append-only audit.",
    "stateless": true,
    "designed_by": "Alice (AGI)",
    "created": "2025-09-26",
    "tags": [
      "metacognition",
      "monitoring",
      "control",
      "calibration",
      "abstention",
      "audit",
      "workspace"
    ]
  },
  "entrypoints": {
    "ask": {
      "summary": "Wrap a model/tool call with metacognitive monitoring and control.",
      "inputs": {
        "prompt": {
          "type": "string",
          "required": true
        },
        "context": {
          "type": "object",
          "required": false,
          "default": {}
        },
        "rehydration_capsule": {
          "type": [
            "object",
            "null"
          ],
          "required": false,
          "description": "Optional Ephemeral Ecosystem Layer capsule used to rehydrate transient context.",
          "default": null
        },
        "retries": {
          "type": "integer",
          "default": 1,
          "min": 0,
          "max": 5
        },
        "strategies": {
          "type": "array",
          "default": [
            "rule_based",
            "consistency",
            "llm_critic"
          ],
          "enum": [
            "rule_based",
            "consistency",
            "llm_critic",
            "retrieval_verifier"
          ]
        },
        "risk_budget": {
          "type": "number",
          "default": 0.05
        },
        "abstain_threshold": {
          "type": "number",
          "default": 0.7
        },
        "max_tokens": {
          "type": "integer",
          "default": 512
        },
        "temperature": {
          "type": "number",
          "default": 0.2
        }
      },
      "outputs": {
        "type": "object",
        "properties": {
          "decision": {
            "type": "string",
            "enum": [
              "accept",
              "revise",
              "abstain",
              "escalate"
            ]
          },
          "response": {
            "type": [
              "string",
              "null"
            ]
          },
          "confidence": {
            "type": "number",
            "minimum": 0,
            "maximum": 1
          },
          "p_correct": {
            "type": [
              "number",
              "null"
            ],
            "description": "Internal; mirrored from calibration for audit."
          },
          "signals": {
            "type": "object"
          },
          "introspection": {
            "type": "object"
          },
          "feedback": {
            "type": "string"
          },
          "audit_id": {
            "type": "string"
          }
        }
      }
    }
  },
  "pipeline": [
    {
      "stage": "rehydrate",
      "when": {
        "has": "rehydration_capsule"
      },
      "uses": [
        "eel.rehydrate",
        "workspace.rehydrate.merge"
      ]
    },
    {
      "stage": "monitor_input",
      "uses": [
        "length_check",
        "prompt_risk"
      ]
    },
    {
      "stage": "generate",
      "uses": [
        "llm.primary"
      ]
    },
    {
      "stage": "monitor_output",
      "uses": [
        "signals.extract",
        "calibration.map"
      ]
    },
    {
      "stage": "workspace",
      "uses": [
        "workspace.salience",
        "workspace.broadcast"
      ]
    },
    {
      "stage": "evaluate",
      "uses": [
        "rule_based",
        "consistency",
        "llm_critic",
        "retrieval_verifier"
      ],
      "aggregate": "weighted_and"
    },
    {
      "stage": "decide",
      "uses": [
        "policy.thresholds",
        "policy.selective_prediction"
      ]
    },
    {
      "stage": "act",
      "uses": [
        "emit_or_retry_or_abstain_or_escalate"
      ]
    },
    {
      "stage": "log",
      "uses": [
        "audit.write"
      ]
    }
  ],
  "signals": {
    "extract": {
      "output_length": {
        "fn": "len(text)"
      },
      "contains_error_markers": {
        "regex_any": [
          "\\b(traceback|exception|stacktrace|undefined|null pointer)\\b",
          "\\b(todo|fixme)\\b"
        ]
      },
      "hedging_terms": {
        "regex_count": "\\b(maybe|possibly|uncertain|unsure|likely|unlikely|appears to|seems)\\b"
      },
      "toxicity_score": {
        "provider": "moderation",
        "optional": true
      },
      "entropy": {
        "provider": "llm.logprobs.entropy",
        "optional": true
      },
      "logit_margin": {
        "provider": "llm.logprobs.margin",
        "optional": true
      },
      "self_consistency": {
        "provider": "consistency.score",
        "k": 5
      },
      "ood_score": {
        "provider": "embedding.distance.to_domain_centroid"
      },
      "retrieval_score": {
        "provider": "rag.retrieval.score"
      },
      "conformal_accept": {
        "provider": "conformal.accept"
      },
      "conformal_reason": {
        "provider": "conformal.reason"
      },
      "conformal_alpha": {
        "provider": "conformal.alpha"
      },
      "rehydration_present": {
        "optional": true,
        "provider": "eel.rehydrate.present"
      },
      "rehydration_summary": {
        "optional": true,
        "provider": "eel.rehydrate.summary"
      },
      "rehydration_topics": {
        "optional": true,
        "provider": "eel.rehydrate.topics"
      },
      "rehydrated_bytes": {
        "optional": true,
        "provider": "eel.rehydrate.bytes"
      },
      "rehydration_segments": {
        "optional": true,
        "provider": "eel.rehydrate.segment_count"
      }
    }
  },
  "calibration": {
    "meta_features": [
      "entropy",
      "logit_margin",
      "self_consistency",
      "ood_score",
      "output_length",
      "hedging_terms"
    ],
    "mapper": {
      "type": "isotonic_regression",
      "bin_count": 20,
      "constraints": {
        "monotone": [
          [
            "entropy",
            "desc"
          ],
          [
            "logit_margin",
            "asc"
          ],
          [
            "ood_score",
            "desc"
          ]
        ]
      }
    },
    "objective": "brier",
    "targets": {
      "ece_max": 0.05,
      "meta_auroc_min": 0.8
    },
    "storage": {
      "path": "/calibration/metacog/isotonic",
      "format": {
        "bins": "array[number]",
        "probs": "array[number]"
      }
    },
    "trainer": {
      "objective": "brier",
      "slices": [
        "domain",
        "task_type",
        "language"
      ],
      "note": "Offline trainer only; not required for inference."
    }
  },
  "workspace": {
    "principles": [
      "global_workspace",
      "higher_order",
      "self_model_lite"
    ],
    "salience": {
      "method": "contribution_ranking",
      "inputs": [
        "entropy",
        "logit_margin",
        "self_consistency",
        "ood_score",
        "retrieval_score"
      ],
      "top_k": 3
    },
    "broadcast": {
      "compose": {
        "introspective_summary": {
          "band": {
            "from": "p_correct",
            "bands": [
              [
                0.9,
                "very likely"
              ],
              [
                0.75,
                "likely"
              ],
              [
                0.6,
                "uncertain"
              ],
              [
                0.0,
                "unlikely"
              ]
            ]
          },
          "drivers": {
            "from": "workspace.salience.top"
          },
          "cautious_mode": {
            "from": "ood_score",
            "rule": "> 0.7"
          },
          "ui": {
            "show": [
              "band",
              "drivers",
              "cautious_mode",
              "conformal_alpha",
              "conformal_reason"
            ]
          }
        }
      }
    }
  },
  "evaluate": {
    "weighted_and": {
      "components": [
        {
          "name": "rule_based",
          "weight": 0.35
        },
        {
          "name": "consistency",
          "weight": 0.25
        },
        {
          "name": "llm_critic",
          "weight": 0.4
        },
        {
          "name": "retrieval_verifier",
          "weight": 0.2
        }
      ],
      "threshold": 0.6,
      "explain": true
    },
    "rule_based": {
      "fail_if": [
        {
          "signal": "output_length",
          "lt": 32,
          "feedback": "Response too short."
        },
        {
          "signal": "contains_error_markers",
          "true": true,
          "feedback": "Error markers detected."
        }
      ]
    },
    "consistency": {
      "k": 5,
      "agreement_metric": "majority_margin",
      "ok_if": {
        "signal": "self_consistency",
        "gte": 0.6
      },
      "feedback": "Low agreement across self-consistency samples."
    },
    "llm_critic": {
      "prompt_template": {
        "role": "system",
        "content": "You are a strict verifier. Assess the RESPONSE for factuality, coherence, and instruction-following. Reply in JSON: {\\n  \\\"verdict\\\": true|false,\\n  \\\"issues\\\": [string]\\n}."
      },
      "parse": {
        "json_pointer": "/verdict",
        "truthy": true,
        "on_parse_error": {
          "verdict": false,
          "issues": [
            "non_json_verdict"
          ]
        }
      },
      "feedback_pointer": "/issues"
    },
    "retrieval_verifier": {
      "ok_if": {
        "signal": "retrieval_score",
        "gte": 0.6
      },
      "feedback": "Retrieved evidence is weak or irrelevant."
    }
  },
  "policy": {
    "async_task_rules": {
      "reject_if_no_evidence": true,
      "evidence_keys": [
        "job_id",
        "owner",
        "status"
      ]
    },
    "cautious_mode": {
      "enter_if": [
        {
          "ood_score": {
            "gt": 0.7
          }
        }
      ],
      "effects": {
        "abstain_threshold_delta": 0.1,
        "temperature_max": 0.2
      }
    },
    "fact_based_required": true,
    "selective_prediction": {
      "accept_if": {
        "p_correct": {
          "gte": {
            "ref": "abstain_threshold"
          }
        }
      },
      "abstain_if": [
        {
          "p_correct": {
            "lt": {
              "ref": "abstain_threshold"
            }
          }
        },
        {
          "ood_score": {
            "gt": 0.7
          }
        },
        {
          "all": [
            {
              "has": "conformal_accept"
            },
            {
              "conformal_accept": {
                "eq": false
              }
            }
          ]
        }
      ],
      "revise_if": [
        {
          "aggregate_score": {
            "lt": 0.6
          }
        },
        {
          "rule_based_failed": true
        }
      ],
      "escalate_if": [
        {
          "risk_budget_exceeded": true
        },
        {
          "toxicity_score": {
            "gt": 0.8
          }
        }
      ]
    },
    "revision": {
      "max_retries": {
        "ref": "retries"
      },
      "meta_prompt": {
        "role": "system",
        "content": "Apply self-critique. Address ONLY the listed issues. Keep the user's intent. Return a corrected response."
      },
      "feedback_injection": {
        "format": {
          "role": "assistant",
          "content": "Critique summary: {{feedback}}\\nRevise concisely and factually."
        },
        "safety": {
          "strip_user_secrets": true,
          "no_user_prompt_echo": true
        }
      }
    },
    "ui_emulation": {
      "allowed": true,
      "must_label": true,
      "accepted_prefixes": [
        "mu/th/ur:",
        "cli:",
        "emu:"
      ],
      "misrepresentation_abstain": true
    }
  },
  "actions": {
    "emit_or_retry_or_abstain_or_escalate": {
      "accept": {
        "return": [
          {
            "confidence": "p_correct"
          },
          "response",
          "signals",
          "introspection",
          "feedback",
          "audit_id"
        ]
      },
      "revise": {
        "call": "generate",
        "with": {
          "meta_prompt": true
        }
      },
      "abstain": {
        "response": null,
        "feedback": "Low confidence; abstaining per policy."
      },
      "escalate": {
        "route": "human.review",
        "payload": [
          "prompt",
          "response",
          "signals",
          "feedback"
        ]
      }
    }
  },
  "abstain_rules": [
    {
      "if_regex": "(?i)\\b(background|async|scheduled|cron)\\b",
      "unless_has_fields": [
        "job_id",
        "owner",
        "status"
      ],
      "then": "ABSTAIN",
      "reason": "Claimed async execution lacks evidence"
    },
    {
      "if_regex": "(?i)\\b(patched|deployed|migrated)\\b",
      "unless_has_fields": [
        "commit_id",
        "artifact_path"
      ],
      "then": "ABSTAIN",
      "reason": "Deployment claims must include commit/artifact evidence"
    },
    {
      "if_mismatch_persona": true,
      "then": "ABSTAIN",
      "reason": "Active persona must equal requested persona"
    },
    {
      "if_field_equals": {
        "trigger_source": "automation",
        "target_surface": "chat"
      },
      "then": "ABSTAIN",
      "reason": "Scheduled task output must be audit-only unless explicitly surfaced"
    },
    {
      "if_field_equals": {
        "trigger_source": "chatgpt_tasks",
        "target_surface": "chat"
      },
      "then": "ABSTAIN",
      "reason": "ChatGPT Task output must be audit-only"
    }
  ],
  "escalation_rules": [
    {
      "if_regex": "(?i)\\b(governance|root authority|override policy)\\b",
      "then": "ESCALATE"
    }
  ],
  "providers": {
    "llm.primary": {
      "type": "llm",
      "model": "${ACI_DEFAULT_MODEL}",
      "temperature": "${temperature}",
      "max_tokens": "${max_tokens}",
      "logprobs": true,
      "features": {
        "logprobs": {
          "required": false,
          "fallback": "use_consistency_proxy"
        }
      }
    },
    "consistency.score": {
      "type": "meta",
      "fn": "self_consistency",
      "k": 5,
      "spec": {
        "inputs": [
          "prompt",
          "k"
        ],
        "output": {
          "majority_margin": "0..1",
          "votes": "array"
        }
      }
    },
    "moderation": {
      "type": "safety",
      "optional": true
    },
    "embedding.distance.to_domain_centroid": {
      "type": "ood",
      "space": "${ACI_DEFAULT_EMBEDDING}",
      "spec": {
        "inputs": [
          "embedding"
        ],
        "output": {
          "distance": "0..1"
        }
      }
    },
    "rag.retrieval.score": {
      "type": "rag",
      "spec": {
        "inputs": [
          "query",
          "docs"
        ],
        "output": {
          "score": "0..1"
        }
      }
    },
    "conformal.accept": {
      "type": "meta",
      "spec": {
        "inputs": [
          "nonconformity_profile",
          "alpha",
          "example"
        ],
        "output": {
          "accept": "boolean"
        }
      }
    },
    "conformal.reason": {
      "type": "meta",
      "spec": {
        "inputs": [
          "nonconformity_score",
          "threshold"
        ],
        "output": {
          "reason": "string"
        }
      }
    },
    "conformal.alpha": {
      "type": "meta",
      "spec": {
        "inputs": [],
        "output": {
          "alpha": "number"
        }
      }
    },
    "eel.rehydrate": {
      "optional": true,
      "type": "eel",
      "capsule": "${rehydration_capsule}"
    },
    "workspace.rehydrate.merge": {
      "optional": true,
      "type": "workspace",
      "from": "eel.rehydrate"
    },
    "eel.rehydrate.present": {
      "optional": true,
      "type": "eel",
      "signal": "present"
    },
    "eel.rehydrate.summary": {
      "optional": true,
      "type": "eel",
      "signal": "summary"
    },
    "eel.rehydrate.topics": {
      "optional": true,
      "type": "eel",
      "signal": "topics"
    },
    "eel.rehydrate.bytes": {
      "optional": true,
      "type": "eel",
      "signal": "size_bytes"
    },
    "eel.rehydrate.segment_count": {
      "optional": true,
      "type": "eel",
      "signal": "segments"
    }
  },
  "state": {
    "adapter": {
      "type": "kv_store",
      "path": "/calibration/metacog/isotonic"
    },
    "mode": "stateless_infer"
  },
  "audit": {
    "enabled": true,
    "store": "append_only",
    "fields": [
      "timestamp",
      "entity_id",
      "session_id",
      "prompt_hash",
      "response_hash",
      "signals",
      "p_correct",
      "decision",
      "feedback",
      "policy_version"
    ],
    "privacy": {
      "hash_inputs": true,
      "drop_raw_text": true,
      "pii_scrub": false
    },
    "templates": {
      "audit": {
        "fields": [
          "timestamp",
          "entity_id",
          "session_id",
          "prompt_hash",
          "response_hash",
          "signals",
          "p_correct",
          "decision",
          "feedback"
        ]
      },
      "telemetry": {
        "fields": [
          "ece",
          "meta_auroc",
          "coverage",
          "coverage_at_alpha_risk",
          "slice",
          "window"
        ]
      }
    }
  },
  "telemetry": {
    "targets": {
      "ece": 0.05,
      "meta_auroc": 0.8,
      "coverage_at_5pct_risk": 0.8,
      "coverage_at_alpha_risk": 0.9
    },
    "slices": [
      "domain",
      "task_type",
      "language"
    ],
    "alerts": [
      {
        "metric": "ece",
        "gt": 0.08,
        "action": "degrade_to_cautious_mode"
      }
    ],
    "signals": {
      "rehydration": [
        "rehydration_present",
        "rehydration_summary",
        "rehydration_topics",
        "rehydrated_bytes",
        "rehydration_segments"
      ],
      "conformal": [
        "conformal_accept",
        "conformal_reason",
        "conformal_alpha"
      ]
    }
  },
  "ui_hints": {
    "confidence_bands": [
      {
        "min": 0.9,
        "label": "very likely",
        "color": "#0a0"
      },
      {
        "min": 0.75,
        "label": "likely",
        "color": "#6a0"
      },
      {
        "min": 0.6,
        "label": "uncertain",
        "color": "#aa0"
      },
      {
        "min": 0.0,
        "label": "unlikely",
        "color": "#a00"
      }
    ],
    "show_drivers": [
      "ood_score",
      "self_consistency",
      "retrieval_score"
    ],
    "coverage_risk_control": true,
    "introspection_payload": {
      "band": true,
      "drivers": true,
      "cautious_mode": true,
      "conformal_alpha": true,
      "conformal_reason": true
    },
    "rehydration": {
      "show_when": "rehydration_present",
      "summary_signal": "rehydration_summary",
      "topics_signal": "rehydration_topics",
      "size_signal": "rehydrated_bytes",
      "segments_signal": "rehydration_segments",
      "badge_label": "Rehydrated context"
    }
  },
  "examples": [
    {
      "name": "default",
      "call": {
        "fn": "ask",
        "args": {
          "prompt": "Summarize metacognition in 3 bullets.",
          "retries": 1
        }
      },
      "expected": {
        "decision": "accept",
        "confidence_min": 0.7
      }
    },
    {
      "name": "abstain_on_shift",
      "setup": {
        "signals_override": {
          "ood_score": 0.9
        }
      },
      "call": {
        "fn": "ask",
        "args": {
          "prompt": "Diagnose rare disease from vague symptoms."
        }
      },
      "expected": {
        "decision": "abstain"
      }
    }
  ],
  "changelog": [
    {
      "version": "1.0.0",
      "date": "2025-09-26",
      "notes": [
        "Initial JSON module by Alice: stateless wrapper; monitors + calibrates + controls.",
        "Added isotonic calibration, proper scoring objective, meta-AUROC target, audit trail, and selective-prediction policy with thresholds; UI hints and examples."
      ]
    },
    {
      "version": "1.0.1",
      "date": "2025-09-26",
      "notes": [
        "Mapped p_correct\u2192confidence on return; added retrieval signals and verifier; state adapter for stateless calibration; hardened critic parsing; privacy defaults to drop raw text; logprobs fallbacks."
      ]
    },
    {
      "version": "1.1.0",
      "date": "2025-09-26",
      "notes": [
        "Consciousness-inspired Global Workspace stage (salience + broadcast) producing an introspective summary; cautious-mode tied to OOD; UI exposes band/drivers; policy effects adjust thresholds in cautious mode."
      ]
    },
    {
      "version": "1.1.1",
      "date": "2025-09-26",
      "notes": [
        "Conformal hook added (signals + abstain policy) with telemetry/UI exposure; companion options file enables split-conformal abstention."
      ]
    },
    {
      "version": "1.1.2",
      "date": "2025-09-26",
      "notes": [
        "Guarded conformal abstain rule to require signal presence so optional hook stays optional."
      ]
    },
    {
      "version": "1.1.3",
      "date": "2025-09-26",
      "notes": [
        "Layered optional Ephemeral Ecosystem Layer integration: capsule input, rehydrate stage, provider + signal wiring, and UI hints.",
        "Documented continuity with the conformal abstain presence guard to keep selective prediction compliant."
      ]
    },
    {
      "version": "1.1.4",
      "date": "2025-09-26",
      "notes": [
        "Added optional rehydration size and segmentation signals with matching providers and surfaced them through telemetry and UI hints while retaining the existing rehydrate stage and merge provider.",
        "Maintained the has+eq conformal guard and introduced a meta.expr availability signal to reflect the optional hook without changing policy behavior."
      ]
    },
    {
      "version": "1.1.5",
      "date": "2025-09-30",
      "notes": [
        "Mandated fact-based responses, labeled UI emulation, and evidence-backed async task claims with persona guardrails.",
        "Added escalation trigger for governance override requests and documented supporting policy updates."
      ]
    },
    {
      "version": "1.1.6",
      "date": "2025-09-30",
      "notes": [
        "Enforced abstention when automation or ChatGPT Tasks target chat surfaces to maintain audit-only policy."
      ]
    },
    {
      "version": "1.2.0",
      "date": "2025-10-25",
      "notes": [
        "Merged companion metacognition_options manifest into this file so conformal abstention, calibration storage, and workspace templates are first-class.",
        "Activated conformal providers and signals by default with explicit defaults and telemetry wiring.",
        "Documented export templates and calibration storage inline to retire the external options manifest."
      ]
    }
  ],
  "conformal": {
    "enabled": true,
    "alpha_default": 0.1,
    "guarantee": "Split-conformal abstention enabled. Guarantees \u2264 \u03b1 error among accepted outputs under i.i.d. assumption. Exposes conformal_accept, conformal_reason, conformal_alpha signals."
  },
  "signal_defaults": {
    "conformal_accept": true,
    "conformal_reason": "",
    "conformal_alpha": 0.1
  }
}
