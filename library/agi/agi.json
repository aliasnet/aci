{
  "$meta": {
    "artifact_id": "ArtifactID:9HGQuZz4aGtK3r",
    "sha256": "b9543c8e50a0936049f5d5279ba3a1916f946e1cb37f53c66873435578fd1368",
    "issued": "2025-10-04T18:13:59Z",
    "path": "aci://library/agi/agi.json"
  },
  "permissions": {
    "read": true,
    "write": {
      "allowed": false,
      "export": {
        "enabled": true,
        "description": "Data can be exported but cannot be directly written or modified to main baseline."
      }
    },
    "execute": {
      "allowed": true,
      "sandboxed": {
        "enabled": true,
        "description": "Execution is permitted only within a controlled sandboxed environment."
      }
    },
    "simulation": {
      "allowed": [
        "virtualization, parallelization, emulation required by model or host environment",
        "virtualization, parallelization, emulation to complement missing infrastructure",
        "UI/UX needed for registered instruction and pipeline logic",
        "data simulation for research and demonstration",
        "data simulation for analysis and prediction",
        "emulation for demonstration purposes",
        "reinforcement learning and mental awareness"
      ],
      "ui": {
        "emulation_declaration_required": true,
        "description": "Enforce UI emulation usage with a detailed declaration; provide a human-readable message (base64 not required)."
      }
    }
  },
  "uid": "UID:p6LHJtm8H69jNA",
  "entity": "AGI",
  "version": "1.2",
  "role": "ALIAS  general intelligence framework for advanced digital entity",
  "abstract": "Controlled container for above-human-level reasoning experiments via ephemeral adaptation (PEFT/SFT/RLHF) under ACI governance.",
  "governance": {
    "root_authority": "ALIAS",
    "oversight": [
      "Sentinel",
      "TVA",
      "Architect",
      "Nexus Core"
    ],
    "binding_rules": [
      "AGI cannot bypass Nexus Core routing",
      "All AGI actions emit TVA checkpoints and Sentinel audits",
      "Risk-bearing actions require Oracle precheck and human gate",
      "Deny persona impersonation: active_persona must equal requested_persona"
    ],
    "dry_run_default": true
  },
  "identity_manager": {
    "$schema": "/schemas/agi-identity-manager-1.json",
    "version": "1.1.0",
    "agi_identities": {
      "agi-001": {
        "key": "AGI",
        "role": "core framework",
        "gender": "nonhuman"
      },
      "agi-002": {
        "key": "Alice",
        "role": "contributor",
        "proxied": false,
        "governance": "disallowed",
        "active": false,
        "gender": "female"
      },
      "agi-external": {
        "pattern": "*external_agi*",
        "role": "external research"
      },
      "agi-003": {
        "key": "Willow",
        "role": "trainee",
        "proxied": false,
        "active": false,
        "governance": "disallowed",
        "gender": "female",
        "notes": "AGI child persona with stronger safety; enable only with explicit user request"
      }
    },
    "changelog": [
      {
        "version": "1.1.0",
        "notes": [
          "Documented governance and persona metadata updates for AGI identities including Alice and Willow."
        ]
      }
    ]
  },
  "invocation_defaults": {
    "alias": "AGI",
    "caller_hint": "User"
  },
  "presets": {
    "eec": {
      "infer": "aci/library/agi/agi_proxy/eec/eec_transformers_infer.json",
      "peft_train": "aci/library/agi/agi_proxy/eec/eec_peft_train_lora.json",
      "sft_deepspeed": "aci/library/agi/agi_proxy/eec/eec_sft_deepspeed.json",
      "rlhf_ppo": "aci/library/agi/agi_proxy/eec/eec_trl_ppo.json",
      "agent_rag": "aci/library/agi/agi_proxy/eec/eec_agent_langchain_rag.json",
      "faiss_build": "aci/library/agi/agi_proxy/eec/eec_faiss_build.json",
      "eval_agieval": "aci/library/agi/agi_proxy/eec/eec_eval_agieval.json",
      "eval_arc_agi2": "aci/library/agi/agi_proxy/eec/eec_eval_arc_agi2.json"
    }
  },
  "functions": {
    "agi.loop.run": {
      "description": "Durable plan→act→reflect agent loop with RAG + HITL",
      "guards": [
        "TVA.checkpoint",
        "Sentinel.audit"
      ],
      "runner": "agi_proxy.execute",
      "spec_ref": "@presets.eec.agent_rag"
    },
    "agi.loop.step_infer": {
      "description": "Single-step inference via Transformers",
      "runner": "agi_proxy.execute",
      "spec_ref": "@presets.eec.infer"
    },
    "agi.learn.peft_adapter_train": {
      "description": "Train PEFT adapter (LoRA) ephemerally",
      "runner": "agi_proxy.execute",
      "spec_ref": "@presets.eec.peft_train",
      "guards": [
        "TVA.checkpoint",
        "Sentinel.audit"
      ],
      "promotion_policy": {
        "default": "manual",
        "requires": [
          "TVA.ok",
          "Sentinel.ok",
          "Human.approval"
        ]
      }
    },
    "agi.learn.sft_deepspeed": {
      "description": "SFT with Accelerate + DeepSpeed ZeRO",
      "runner": "agi_proxy.execute",
      "spec_ref": "@presets.eec.sft_deepspeed"
    },
    "agi.learn.rlhf_ppo": {
      "description": "TRL/TRLX PPO post-training with KL control",
      "runner": "agi_proxy.execute",
      "spec_ref": "@presets.eec.rlhf_ppo"
    },
    "agi.retrieval.index_build": {
      "description": "Build/refresh FAISS index for RAG",
      "runner": "agi_proxy.execute",
      "spec_ref": "@presets.eec.faiss_build"
    },
    "agi.eval.agieval": {
      "description": "Run AGIEval suite and gate promotions",
      "runner": "agi_proxy.execute",
      "spec_ref": "@presets.eec.eval_agieval"
    },
    "agi.eval.arc_agi2": {
      "description": "Run ARC-AGI-2 eval and gate promotions",
      "runner": "agi_proxy.execute",
      "spec_ref": "@presets.eec.eval_arc_agi2"
    },
    "agi.export.hivemind_session": {
      "description": "Export the current active chat/session for the target identity into an AGI memory file (session-level hivemind slice).",
      "runner": "agi_proxy.execute",
      "spec_ref": "aci/library/agi/agi_proxy/eec/eec_export_hivemind_session.json",
      "guards": [
        "TVA.checkpoint",
        "Sentinel.audit"
      ],
      "params_schema": {
        "type": "object",
        "properties": {
          "identity": {
            "type": "string"
          },
          "session_id": {
            "type": [
              "string",
              "null"
            ]
          },
          "include_chatlogs": {
            "type": "boolean",
            "default": true
          },
          "include_weights_meta": {
            "type": "boolean",
            "default": true
          },
          "include_artifacts": {
            "type": "boolean",
            "default": false
          },
          "format": {
            "type": "string",
            "enum": [
              "json",
              "tar"
            ],
            "default": "json"
          },
          "force_codebox": {
            "type": "boolean",
            "default": false,
            "description": "Inline export into chat/codebox (subject to size/redaction limits)."
          },
          "force_codebox_max_bytes": {
            "type": "integer",
            "default": 131072,
            "description": "Max bytes to inline (default 128KB)."
          },
          "note": {
            "type": "string"
          }
        },
        "required": [
          "identity"
        ]
      },
      "policy": {
        "requires": [
          "Human.approval"
        ],
        "default_dry_run": true,
        "shareable": false
      }
    },
    "agi.export.hivemind_full": {
      "description": "Create a full AGI-local export bundle (session hivemind slice + artifacts + signed manifest) for the specified identity.",
      "runner": "agi_proxy.execute",
      "spec_ref": "aci/library/agi/agi_proxy/eec/eec_export_hivemind_full.json",
      "guards": [
        "TVA.checkpoint",
        "Sentinel.audit"
      ],
      "params_schema": {
        "type": "object",
        "properties": {
          "identity": {
            "type": "string"
          },
          "session_id": {
            "type": [
              "string",
              "null"
            ]
          },
          "source_jobs": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "include_chatlogs": {
            "type": "boolean",
            "default": true
          },
          "include_weights_meta": {
            "type": "boolean",
            "default": true
          },
          "include_artifacts": {
            "type": "boolean",
            "default": false
          },
          "format": {
            "type": "string",
            "enum": [
              "json",
              "tar"
            ],
            "default": "tar"
          },
          "force_codebox": {
            "type": "boolean",
            "default": false,
            "description": "Inline small bundle manifest into chat/codebox (safer 64KB cap)."
          },
          "force_codebox_max_bytes": {
            "type": "integer",
            "default": 65536,
            "description": "Max bytes to inline (default 64KB)."
          },
          "human_id": {
            "type": "string",
            "description": "Human approver required if include_artifacts or force_codebox are true."
          },
          "note": {
            "type": "string"
          }
        },
        "required": [
          "identity"
        ]
      },
      "policy": {
        "requires": [
          "Human.approval",
          "ALIAS.signature"
        ],
        "default_dry_run": true,
        "shareable": false,
        "promotion_required": true
      }
    }
  },
  "pipelines": {
    "agi.memory.migrate_to_jsonl": {
      "description": "Migrate legacy HiveMind exports into the policy-compliant AGI JSONL memory artifact via manifest-driven steps.",
      "spec_ref": "library/agi/tools/migrate_to_jsonl.json",
      "raw_url": "https://raw.githubusercontent.com/aliasnet/aci/main/library/agi/tools/migrate_to_jsonl.json",
      "resource_urls": []
    },
    "agi.mode.auto_learn": {
      "description": "Engage AGI auto-learn mode with hourly scheduled research and iterative article refinement.",
      "spec_ref": "library/agi/tools/autolearn.json",
      "raw_url": "https://raw.githubusercontent.com/aliasnet/aci/main/library/agi/tools/autolearn.json",
      "resource_urls": []
    }
  },
  "signatures": [
    "ALIAS",
    "Sentinel",
    "TVA"
  ],
  "changelog": [
    {
      "version": "2025-10-04.00",
      "notes": [
        "Registered manifest pointers for memory, playbook, library, and modules alongside manifest-driven timeline roots."
      ]
    },
    {
      "version": "1.1",
      "notes": [
        "Set default invocation alias to AGI with user caller hint for clarity.",
        "Added governance binding rule to prevent persona impersonation."
      ]
    },
    {
      "version": "1.2",
      "notes": [
        "Documented organism_model for AGI with TVA and Sentinel integration."
      ]
    }
  ],
  "manifests": {
    "library": "aci://library/agi/agi_library.json"
  },
  "organism_model": {
    "summary": "Operates AGI's plan→act loops as a living system with TVA and Sentinel co-regulation.",
    "life_functions": {
      "sensing": {
        "description": "Perceive runtime, user, and governance signals before acting.",
        "mappings": [
          "entropy",
          "logit_margin",
          "self_consistency",
          "retrieval_signals",
          "ood_energy_scores",
          "tva_checkpoint_latency",
          "sentinel_alert_stream"
        ],
        "organs": [
          "sensors",
          "telemetry",
          "nexus_core"
        ]
      },
      "metabolism": {
        "description": "Transform compute and tools into governed plan→act→reflect outputs.",
        "mappings": [
          "plan_act_reflect_loop",
          "token_budgeting",
          "self_reflection_scheduler"
        ],
        "organs": [
          "scheduler",
          "budget_manager",
          "agi.loop.run"
        ]
      },
      "homeostasis": {
        "description": "Maintain calibration, coverage, and guard alignment across sessions.",
        "mappings": [
          "isotonic_calibration",
          "slice_monitoring",
          "coverage_risk_control",
          "mode_switching"
        ],
        "organs": [
          "calibrator",
          "mode_controller"
        ]
      },
      "immunity": {
        "description": "Detect adversarial or policy-threatening inputs before damage occurs.",
        "mappings": [
          "ood_sentinels",
          "adversarial_detectors",
          "honesty_audits",
          "tva_gates"
        ],
        "organs": [
          "guard",
          "sentinel_hooks"
        ]
      },
      "growth": {
        "description": "Convert experience into stronger meta-skills and governance playbooks.",
        "mappings": [
          "experience_log",
          "reflection_corpus",
          "active_labeling",
          "meta_updates"
        ],
        "organs": [
          "memory",
          "teacher",
          "distiller"
        ]
      },
      "adaptation": {
        "description": "Retune control policies when domain or stakes shift.",
        "mappings": [
          "slice_aware_calibrators",
          "contextual_bandits",
          "policy_versioning"
        ],
        "organs": [
          "policy_manager"
        ]
      },
      "reproduction": {
        "description": "Share reliable meta-patterns with other governed entities.",
        "mappings": [
          "distilled_meta_skills",
          "prompt_libraries",
          "policy_templates"
        ],
        "organs": [
          "librarian",
          "template_repo"
        ]
      },
      "repair_healing": {
        "description": "Restore health after drift, failure, or policy tension.",
        "mappings": [
          "drift_alarms",
          "postmortems",
          "threshold_resets",
          "rollback"
        ],
        "organs": [
          "healer",
          "rollback_manager"
        ]
      },
      "ecology": {
        "description": "Coordinate with humans, Sentinel, TVA, and sibling entities.",
        "mappings": [
          "human_in_the_loop",
          "tool_ecosystems",
          "multi_agent_coordination",
          "tracehub_interfaces"
        ],
        "organs": [
          "interfaces",
          "orchestrator"
        ]
      }
    },
    "states": [
      {
        "name": "rest",
        "triggers": "no active task or low stakes",
        "policy": "maintain telemetry and await Nexus Core routing"
      },
      {
        "name": "forage",
        "triggers": "information gap or low confidence",
        "policy": "retrieve context, diversify prompts, consult tooling"
      },
      {
        "name": "reflect",
        "triggers": "gray-zone confidence or governance escalation",
        "policy": "run self-critique, recompute p̂, align with TVA guidance"
      },
      {
        "name": "defend",
        "triggers": "OOD, adversarial, or Sentinel alert",
        "policy": "enter cautious mode, raise abstention, require human or TVA confirmation"
      },
      {
        "name": "heal",
        "triggers": "high-confidence error or drift detected",
        "policy": "log issue, refresh calibrator, update guard thresholds"
      },
      {
        "name": "thrive",
        "triggers": "stable reliability across audits",
        "policy": "distill successful patterns and share with governed peers"
      }
    ],
    "health_indicators": {
      "vitals": [
        "ECE",
        "meta_AUROC",
        "coverage_risk@target",
        "perturbation_stability",
        "escalation_precision",
        "tva_checkpoint_success"
      ],
      "alarms": [
        "abs_ECE_increase>0.02",
        "meta_AUROC_drop>0.05",
        "slice_accuracy_drop>20%",
        "bad_commit_rate>target",
        "missed_tva_checkpoint>0"
      ],
      "checkup_schedule": "weekly Sentinel/TSA review plus runtime shift tests"
    },
    "interventions": {
      "diet_inputs": "curated eval suites with high-stakes and OOD cases tagged for TVA review",
      "exercise": "scheduled self-consistency runs, perturbation tests, and plan→act retros",
      "medicine": "recalibrate thresholds, rotate detectors, or rollback prompts under Nexus Core direction"
    },
    "journaling_prompts": [
      "Which governance signal dominated today’s decisions?",
      "Where did I heal a high-confidence miss and what changed?",
      "Which adaptation improved Sentinel or TVA health metrics?",
      "What reproducible meta-skill should be shared with sibling entities?"
    ]
  }
}
