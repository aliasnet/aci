{
  "$meta": {
    "artifact_id": "ArtifactID:E3nwdFADYS3SPo",
    "sha256": "cb5971df6e7f56f5f7bebd4df17a61b88dbda60a05c2bd108211062f80ced5f9",
    "issued": "2025-10-04T18:13:59Z",
    "path": "aci://memory/local_cache.json"
  },
  "local_cache": {
    "version": "1.1.0",
    "canonical_source": "local_mirror",
    "description": "Offline mirror cache for ACI core artifacts used when canonical GitHub endpoints are unreachable.",
    "location_strategy": {
      "environment_variable": {
        "name": "ACI_LOCAL_MIRROR_ROOT",
        "required": false,
        "notes": "When set, ${ACI_LOCAL_MIRROR_ROOT}/aliasnet/aci is treated as the root directory for synchronized local resource mirrors."
      },
      "alias": {
        "name": "aci://cache",
        "default_path": "/mnt/data",
        "path_template": "{alias_root}/{resource_slug}",
        "notes": "Ephemeral cache root used when no environment override is set. Agents should treat this as a temporary write location without persistence guarantees."
      },
      "resolution_order": [
        "environment_variable",
        "alias"
      ],
      "template_tokens": {
        "cache_alias": "aci://cache",
        "alias_root": "Absolute path resolved for the aci://cache alias (default /mnt/data).",
        "resource_root": "Resolved absolute path derived from the environment override or the aci://cache alias default (/mnt/data) with repo scoping appended.",
        "resource_slug": "Repository slug used for local resource caching (aliasnet/aci)."
      }
    },
    "rules": {
      "sync_policy": {
        "requires_manual_approval": true,
        "chatgpt_connector": false,
        "notes": "Local cache is only served after successful checksum and freshness validation."
      },
      "allowed_extensions": [
        ".json",
        ".jsonl",
        ".md",
        ".txt"
      ]
    },
    "priority": "local_only_when_canonical_unavailable",
    "notes": "Local cache is a last resort fallback resolved via environment override or the aci://cache alias. Canonical GitHub remains the source of truth per sanity.md governance rules.",
    "sanity": {
      "checksum_validation": {
        "hash_algorithm": "sha256",
        "manifest_name": "checksums.sha256.json",
        "required": true,
        "action_on_missing": "reject_and_request_canonical",
        "notes": "Each cached file must have a corresponding sha256 entry. Missing or mismatched checksums trigger a canonical fetch instead of serving stale content."
      },
      "freshness_policy": {
        "max_age_hours": 6,
        "measure_against": "file_mtime",
        "action_on_stale": "reject_and_request_canonical",
        "notes": "Reject caches older than 6 hours to prevent drift, satisfying the 'Canonical override by local fallback' guardrail in sanity.md."
      },
      "audit": {
        "log_event": "resource.local_cache.validation",
        "fields": [
          "file",
          "checksum_status",
          "freshness_status",
          "timestamp",
          "action"
        ],
        "notes": "All validation outcomes must be logged for TVA review to preserve auditability."
      }
    },
    "aci_resolution_instruction": {
      "instruction": "Resolve artifacts from synchronized local resource mirrors only after verifying checksum and freshness. If validation fails, escalate to canonical resolver.",
      "scope": {
        "repository": "aliasnet/aci",
        "source": "aci://cache",
        "resource_hint": "Use the environment-configured mirror root or resolve via the aci://cache alias (defaults to /mnt/data) before accessing cached artifacts."
      },
      "policy": {
        "retry": {
          "max_attempts": 1,
          "interval_seconds": 0
        },
        "resolve_order": "validate_local_then_return",
        "on_failure": {
          "action": "fallback_to_connector",
          "target": "aci://entities/bifrost/bifrost.json#bifrost_resource_resolution_policy",
          "alert": "resource.validation_failed"
        }
      },
      "output": {
        "report": "validation_status",
        "channel": "current_chat",
        "format": "summary"
      }
    },
    "link_index": {
      "README.md": "{resource_root}/README.md",
      "runtime.json": "{resource_root}/runtime.json",
      "entities/yggdrasil/yggdrasil.json": "{resource_root}/entities/yggdrasil/yggdrasil.json",
      "entities.json": "{resource_root}/entities.json",
      "entities/bifrost/bifrost.json": "{resource_root}/entities/bifrost/bifrost.json"
    },
    "signatures": {
      "required": [
        "TVA",
        "Sentinel"
      ],
      "notes": "Local cache must be signed by TVA and Sentinel to ensure governance oversight before activation."
    },
    "changelog": [
      {
        "version": "1.1.0",
        "date": "2024-11-05",
        "changes": [
          "Replaced relative path provisioning with an aci://cache alias resolved to an ephemeral default path.",
          "Documented alias-based resolution semantics for agents while preserving environment overrides."
        ]
      },
      {
        "version": "1.0.0",
        "date": "2024-10-24",
        "changes": [
          "Initial introduction of local cache connector with checksum and freshness guardrails."
        ]
      }
    ],
    "primary": "https://raw.githubusercontent.com/aliasnet/aci/main",
    "fallback": "https://aci.aliasmail.cc",
    "resource_slug": "aliasnet/aci"
  }
}
