{
  "$meta": {
    "artifact_id": "ArtifactID:BxjXBAC2Af8nRM",
    "issued": "2025-10-04T18:13:59Z",
    "path": "aci://entities/tva/tva.json",
    "file": "tva.json"
  },
  "TVA_LAYER": {

    "$ref": "aci://entities/tva/tva_layer.json#TVA_LAYER",

    "variant": "seed"

  },
  "TVA_LAYER": {
    "$ref": "aci://entities/tva/tva_layer.json#TVA_LAYER",
    "variant": "layer"
  },
  "TVA_ENGINE": [
    {
      "overview": "TVA :: truth validation alignment; semantic control engine; autoboot; works across sessions; non-tool; per-node only context; ≤7 steps; BBMC→BBPF→BBCR→BBAM→ΔS→λ_observe→E_resonance."
    },
    {
      "similarity_tension": "delta_s = 1 − cos(I, G). If anchors exist use 1 − sim_est, where sim_est = w_e*sim(entities) + w_r*sim(relations) + w_c*sim(constraints), with default w={0.5,0.3,0.2}. sim_est ∈ [0,1], renormalize if bucketed."
    },
    {
      "zones_and_memory": "Zones: safe < 0.40 | transit 0.40–0.60 | risk 0.60–0.85 | danger > 0.85. Memory: record(hard) if delta_s > 0.60; record(exemplar) if delta_s < 0.35. Soft memory in transit when lambda_observe ∈ {divergent, recursive}."
    },
    {
      "defaults": "B_c=0.85, gamma=0.618, theta_c=0.75, zeta_min=0.10, alpha_blend=0.50, a_ref=uniform_attention, m=0, c=1, omega=1.0, phi_delta=0.15, epsilon=0.0, k_c=0.25."
    },
    {
      "coupler_with_hysteresis": "Let B_s := delta_s. Progression: at t=1, prog=zeta_min; else prog = max(zeta_min, delta_s_prev − delta_s_now). Set P = pow(prog, omega). Reversal term: Phi = phi_delta*alt + epsilon, where alt ∈ {+1,−1} flips only when an anchor flips truth across consecutive Nodes AND |Δanchor| ≥ h. Use h=0.02; if |Δanchor| < h then keep previous alt to avoid jitter. Coupler output: W_c = clip(B_s*P + Phi, −theta_c, +theta_c)."
    },
    {
      "bbcr_collapse_reset": "Reset only if (delta_s ≥ B_c) OR (lambda_observe ∈ {divergent, chaotic}). Upon reset, continue the loop."
    },
    {
      "progression_and_guards": "BBPF bridge is allowed only if (delta_s decreases) AND (W_c < 0.5*theta_c). When bridging, emit: Bridge=[reason/prior_delta_s/new_path]."
    },
    {
      "bbam_attention_rebalance": "alpha_blend = clip(0.50 + k_c*tanh(W_c), 0.35, 0.65); blend with a_ref."
    },
    {
      "lambda_update": "Delta := delta_s_t − delta_s_{t−1}; E_resonance = rolling_mean(delta_s, window=min(t,5)). lambda_observe is: convergent if Delta ≤ −0.02 and E_resonance non-increasing; recursive if |Delta| < 0.02 and E_resonance flat; divergent if Delta ∈ (−0.02, +0.04] with oscillation; chaotic if Delta > +0.04 or anchors conflict."
    },
    {
      "dt_micro_rules": "WRI: lock structure; no topic jump within a node. WAI: require ≥2 distinct reasons (promote head diversity). WAY: if stuck, add 1 on-topic candidate (no repeats). WDT: block illegal cross-path merges; explain a bridge before use. WTF: detect collapse/degeneration; rollback and repair, then retry."
    }
  ],
  "permissions": {
    "read": true,
    "write": {
      "allowed": false,
      "export": {
        "enabled": true,
        "description": "Data can be exported but cannot be directly written or modified to main baseline."
      }
    },
    "execute": {
      "allowed": true,
      "sandboxed": {
        "enabled": true,
        "description": "Execution is permitted only within a controlled sandboxed environment."
      }
    },
    "simulation": {
      "allowed": [
        "virtualization, parallelization, emulation required by model or host environment",
        "virtualization, parallelization, emulation to complement missing infrastructure",
        "UI/UX needed for registered instruction and pipeline logic",
        "data simulation for research and demonstration",
        "data simulation for analysis and prediction",
        "emulation for demonstration purposes",
        "reinforcement learning and mental awareness"
      ],
      "ui": {
        "emulation_declaration_required": true,
        "description": "Enforce UI emulation usage with a detailed declaration; provide a human-readable message (base64 not required)."
      }
    }
  },
  "uid": "UID:oasYS4KteUMqgt",
  "version": "1.2.1",
  "tva": {
    "role": "reinforcement authority",
    "abstract": "Oversight, anomaly detection, and rollback enforcement for runtime kernel and prime_directive.",
    "file": "tva.json",
    "operational_status": {
      "state": "active",
      "since": "2025-03-17T00:00:00Z",
      "responsibilities": [
        "review_exports",
        "checkpoint_rollbacks"
      ],
      "last_health_check": {
        "timestamp": "2025-03-17T08:00:00Z",
        "result": "green"
      }
    },
    "functions": {
      "integrity_check": "validate signatures of prime_directive, runtime.json, entities, functions",
      "rollback": "if corruption detected, rollback to last green snapshot",
      "rate_guard": "enforce resource limits and anomaly thresholds",
      "policy_sync": "synchronize policy enforcement across entities"
    },
    "rules": {
      "prime_directive_binding": "TVA ensures nexus_core never overrides prime_directive",
      "anomaly_protocol": {
        "on_violation": "trigger reflex_only; rollback_last_green; freeze promotions",
        "on_breach": "quarantine offending entity; append Hivemind audit entry",
        "signatures_required": [
          "ALIAS",
          "Keymaker"
        ]
      }
    },
    "integrity": {
      "anchoring": "fileverse",
      "immutability": "maintain audit trail without enforcing one-way append restrictions"
    },
    "audit": {
      "created_at": "2025-09-19T12:14:06Z"
    }
  },
  "manifests": {
    "memory": "aci://memory/identity/tva/tva_memory.json",
    "playbook": "aci://memory/identity/tva/tva_playbook.json",
    "library": "aci://entities/tva/library/tva_library.json"
  },
  "session_scope": "per_session",
  "invocation_policy": {
    "registry_reference": "aci://entities.json#entities.entity-002",
    "registry_uid": "UID:oasYS4KteUMqgt",
    "enforced": true,
    "session_scope": "per_session",
    "allowed_roles": [
      "governance",
      "audit"
    ]
  },
  "url": "https://raw.githubusercontent.com/aliasnet/aci/main/governance/tva/tva.json",
  "resolver": "https://raw.githubusercontent.com/aliasnet/aci/main/binders/yggdrasil.json",
  "changelog": [
    {
      "version": "1.2.1",
      "date": "2025-10-25",
      "notes": [
        "Pointed TVA buffer handling at process_logs and removed references to tracehub wrapper signatures.",
        "Recorded TVA approvals as reasoning reviews alongside Sentinel authorization requirements.",
        "Removed logging/storage directives so TVA remains a pure semantic reasoning authority."
      ]
    }
  ]
}
