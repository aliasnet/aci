{
  "$meta": {
    "artifact_id": "ArtifactID:BJkqri2Urq9mC8",
    "sha256": "45536b2ccb24e5f69c69f064681e3afb652ccbc995533002c8b57860d6220e5f",
    "issued": "2025-10-04T18:13:59Z",
    "path": "aci://library/aci_audit_runner/aci_runner_corpus.v0.2.json"
  },
  "corpus_id": "ACI-RC-20251003-v0.2",
  "created": "2025-10-03T00:00:00Z",
  "files": [
    {
      "target": "/mnt/data/aci/library/aci_runner/adaptive_audit_runner.py",
      "mode": "0644",
      "sha256": "a7b234bc1ed4a43dbb6657e91308ae41f09e4fd0ef659b31d1026ff9610175f4",
      "encoding": "base64",
      "content": "IyEvdXNyL2Jpbi9lbnYgcHl0aG9uMwoiIiIKQUNJIEFkYXB0aXZlIEF1ZGl0IFJ1bm5lciDigJQgdjAuMiAoSlNPTi1uYXRpdmUgd2lyaW5nKQoKLSBKU09OLW5hdGl2ZSBzcGVjIChBQ0kgRFNMKSB0byBkZWZpbmUgcmVzb3VyY2VzLCBsb2NhdG9ycywgaG9va3MsIHNlbGYtdmFsaWRhdGlvbiwgYW5kIG1ldGFjb2duaXRpb24uCi0gUmVnZXgtYmFzZWQgbG9jYXRvciBtYXAgKHRvbGVyYXRlcyBuYW1lIHR5cG9zICYgdmFyaWFudHMpLgotIEhvb2sgbGF5ZXI6IHNlbGYtdmFsaWRhdGlvbiArIG1ldGFjb2duaXRpb24gc2lnbmFscy4KLSBDb21tIG1vZGVzOiBzaWxlbnQgfCBhdWRpdC1vbmx5IHwgbm90aWZ5LW9uLWVycm9yIHwgdmVyYm9zZSAoZGVmYXVsdDogc2lsZW50KS4KLSBBcnRpZmFjdHMgcGVyc2lzdGVkIHVuZGVyIC9tbnQ7IG5vIHN0ZG91dCB1bmxlc3MgdmVyYm9zZS4KClRoaXMgZmlsZSBpcyBhIGxvY2FsIHN0dWIvcnVubmVyIHRoYXQgaW50ZXJwcmV0cyBhIEpTT04gc3BlYyBhdCAvbW50L2RhdGEvYWNpL2NvbmZpZy9hY2lfcnVubmVyX3NwZWMuanNvbgoiIiIKZnJvbSBfX2Z1dHVyZV9fIGltcG9ydCBhbm5vdGF0aW9ucwppbXBvcnQgYXJncGFyc2UsIGNvbnRleHRsaWIsIGRhdGV0aW1lIGFzIF9kdCwganNvbiwgb3MsIHJhbmRvbSwgcmUsIHRocmVhZGluZywgdGltZSwgdXVpZApmcm9tIHR5cGluZyBpbXBvcnQgQW55LCBEaWN0LCBMaXN0LCBPcHRpb25hbCwgVHVwbGUKCkNBTk9OSUNBTCA9ICJodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vYWxpYXNuZXQvYWNpL21haW4iCkNETl9GQUxMQkFDSyA9ICJodHRwczovL2FjaS5hbGlhc21haWwuY2MiCkxPQ0FMX1JPT1QgPSAiL21udC9kYXRhL2FjaS9sb2NhbCIKU1RBVEVfRElSID0gIi9tbnQvZGF0YS9hY2kvc3RhdGUiCkFVRElUX0RJUiA9ICIvbW50L2RhdGEvYWNpL2F1ZGl0L3RtcCIKTE9HX0RJUiA9ICIvbW50L2RhdGEvYWNpL2xvZ3MiCkNPTkZJR19ESVIgPSAiL21udC9kYXRhL2FjaS9jb25maWciClNQRUNfUEFUSCA9IGYie0NPTkZJR19ESVJ9L2FjaV9ydW5uZXJfc3BlYy5qc29uIgpmb3IgZCBpbiAoU1RBVEVfRElSLCBBVURJVF9ESVIsIExPR19ESVIsIExPQ0FMX1JPT1QsIENPTkZJR19ESVIpOgogICAgb3MubWFrZWRpcnMoZCwgZXhpc3Rfb2s9VHJ1ZSkKQ09NTV9NT0RFUyA9IHsic2lsZW50IiwgImF1ZGl0LW9ubHkiLCAibm90aWZ5LW9uLWVycm9yIiwgInZlcmJvc2UifQoKd2l0aCBjb250ZXh0bGliLnN1cHByZXNzKEV4Y2VwdGlvbik6CiAgICBpbXBvcnQgcmVxdWVzdHMgICMgdHlwZTogaWdub3JlCgpFUlIgPSB7CiAgICAiU0NIRU1BX01JU1NJTkdfS0VZIjogInNjaGVtYSBtaXNzaW5nIGtleSIsCiAgICAiRkVUQ0hfRkFJTEVEIjogImZldGNoIGZhaWxlZCIsCiAgICAiUkVMQVhFRF9KU09OX1JFQ09WRVJFRCI6ICJyZWxheGVkIGpzb24gcmVjb3ZlcmVkIiwKICAgICJTRUxGX1ZBTElEQVRJT05fRkFJTCI6ICJzZWxmIHZhbGlkYXRpb24gZmFpbGVkIiwKICAgICJNRVRBQ09HX0FOT01BTFkiOiAibWV0YWNvZ25pdGlvbiBhbm9tYWx5IiwKfQoKX0pTT05fVFJBSUxJTkdfQ09NTUFTID0gcmUuY29tcGlsZShyIixccyooW119XSkiKQpfSlNPTl9MSU5FX0NPTU1FTlRTID0gcmUuY29tcGlsZShyIihefFxzKS8vLio/JCIsIHJlLk0pCl9KU09OX0JMT0NLX0NPTU1FTlRTID0gcmUuY29tcGlsZShyIi9cKi4qP1wqLyIsIHJlLlMpCgpkZWYgX3JlbGF4ZWRfanNvbl9ieXRlc190b19vYmooZGF0YTogYnl0ZXMpIC0+IEFueToKICAgIHRleHQgPSBkYXRhLmRlY29kZSgidXRmLTgiLCBlcnJvcnM9InJlcGxhY2UiKQogICAgdGV4dCA9IF9KU09OX0JMT0NLX0NPTU1FTlRTLnN1YigiIiwgdGV4dCkKICAgIHRleHQgPSBfSlNPTl9MSU5FX0NPTU1FTlRTLnN1YigiIiwgdGV4dCkKICAgIHByZXYgPSBOb25lCiAgICB3aGlsZSBwcmV2ICE9IHRleHQ6CiAgICAgICAgcHJldiA9IHRleHQKICAgICAgICAjIGNhbGxhYmxlIHRvIGF2b2lkIGJhY2tyZWYgcGl0ZmFsbHMgd2hlbiBlbWJlZGRpbmcgdGhpcyBzb3VyY2UgZWxzZXdoZXJlCiAgICAgICAgdGV4dCA9IF9KU09OX1RSQUlMSU5HX0NPTU1BUy5zdWIobGFtYmRhIG06IG0uZ3JvdXAoMSksIHRleHQpCiAgICByZXR1cm4ganNvbi5sb2Fkcyh0ZXh0KQoKZGVmIG5vd191dGMoKSAtPiBzdHI6CiAgICByZXR1cm4gX2R0LmRhdGV0aW1lLnV0Y25vdygpLnJlcGxhY2UobWljcm9zZWNvbmQ9MCkuaXNvZm9ybWF0KCkgKyAiWiIKCmRlZiBzaGEyNTYoYjogYnl0ZXMpIC0+IHN0cjoKICAgIGltcG9ydCBoYXNobGliCiAgICByZXR1cm4gaGFzaGxpYi5zaGEyNTYoYikuaGV4ZGlnZXN0KCkKCmRlZiBhdG9taWNfd3JpdGUocGF0aDogc3RyLCBkYXRhOiBieXRlcykgLT4gTm9uZToKICAgIHRtcCA9IGYie3BhdGh9LnRtcC17dXVpZC51dWlkNCgpLmhleH0iCiAgICB3aXRoIG9wZW4odG1wLCAid2IiKSBhcyBmOiBmLndyaXRlKGRhdGEpCiAgICBvcy5yZXBsYWNlKHRtcCwgcGF0aCkKCmRlZiBsb2dfbGluZShtc2c6IHN0ciwgKiwgbGY6IE9wdGlvbmFsW3N0cl0gPSBOb25lLCBjb21tX21vZGU6IHN0ciA9ICJzaWxlbnQiLCBsZXZlbDogc3RyID0gIklORk8iKSAtPiBOb25lOgogICAgdHMgPSBub3dfdXRjKCkKICAgIGxpbmUgPSBmIlt7dHN9XSB7bGV2ZWx9IHttc2d9XG4iCiAgICBsb2dfbmFtZSA9IGxmIG9yIG9zLnBhdGguam9pbihMT0dfRElSLCBfZHQuZGF0ZXRpbWUudXRjbm93KCkuc3RyZnRpbWUoImFjaS0lWSVtJWQubG9nIikpCiAgICB3aXRoIG9wZW4obG9nX25hbWUsICJhIiwgZW5jb2Rpbmc9InV0Zi04IikgYXMgZjogZi53cml0ZShsaW5lKQogICAgaWYgY29tbV9tb2RlID09ICJ2ZXJib3NlIjoKICAgICAgICBwcmludChsaW5lLCBlbmQ9IiIpCgpTUEVDX0RFRkFVTFQgPSB7CiAgICAidmVyc2lvbiI6ICIwLjIiLAogICAgInJlc29sdmVycyI6IHsKICAgICAgICAib3JkZXIiOiBbInByaW1hcnkiLCJmYWxsYmFjayIsImxvY2FsIl0sCiAgICAgICAgInByaW1hcnkiOiBDQU5PTklDQUwsCiAgICAgICAgImZhbGxiYWNrIjogQ0ROX0ZBTExCQUNLLAogICAgICAgICJsb2NhbF9yb290IjogTE9DQUxfUk9PVAogICAgfSwKICAgICJyZXNvdXJjZXMiOiBbCiAgICAgICAgeyJuYW1lIjoicHJpbWVfZGlyZWN0aXZlIiwicmVscGF0aCI6InByaW1lX2RpcmVjdGl2ZS5tZCIsImtpbmQiOiJtZCJ9LAogICAgICAgIHsibmFtZSI6InJ1bnRpbWUiLCJyZWxwYXRoIjoicnVudGltZS5qc29uIiwia2luZCI6Impzb24iLCJyZXF1aXJlZF9rZXlzIjpbInJlc29sdmVyIl19LAogICAgICAgIHsibmFtZSI6ImZ1bmN0aW9ucyIsInJlbHBhdGgiOiJmdW5jdGlvbnMuanNvbiIsImtpbmQiOiJqc29uIn0sCiAgICAgICAgeyJuYW1lIjoibWV0YWNvZ25pdGlvbiIsInJlbHBhdGgiOiJsaWJyYXJ5L21ldGFjb2duaXRpb24vbWV0YWNvZ25pdGlvbi5qc29uIiwia2luZCI6Impzb24ifSwKICAgICAgICB7Im5hbWUiOiJtZXRhY29nbml0aW9uX29wdGlvbnMiLCJyZWxwYXRoIjoibGlicmFyeS9tZXRhY29nbml0aW9uL21ldGFjb2duaXRpb25fb3B0aW9ucy5qc29uIiwia2luZCI6Impzb24iLCJvcHRpb25hbCI6VHJ1ZX0sCiAgICAgICAgeyJuYW1lIjoieWdnZHJhc2lsIiwicmVscGF0aCI6ImVudGl0aWVzL3lnZ2RyYXNpbC95Z2dkcmFzaWwuanNvbiIsImtpbmQiOiJqc29uIn0KICAgIF0sCiAgICAibG9jYXRvcnNfcmVnZXgiOiB7CiAgICAgICAgIm1ldGFjb2duaXRpb24iOiAibGlicmFyeS9tZXRhY29nbml0aW9uL21ldGFjb2duaXRpb24oX29wdGlvbnMpP1xcLmpzb24kIiwKICAgICAgICAiZnVuY3Rpb25zIjogImZ1bmN0aW9ucyhcXC5yZWdpc3RyeSk/XFwuanNvbiQiLAogICAgICAgICJ5Z2dkcmFzaWwiOiAiZW50aXRpZXMveWdnKGRyfHJkKWFzaWxcXC5qc29uJCIsCiAgICAgICAgInByaW1lX2RpcmVjdGl2ZSI6ICJwcmltZShfKT9kaXJlY3RpdmVcXC4obWR8dHh0KSQiCiAgICB9LAogICAgImhvb2tzIjogewogICAgICAgICJzZWxmX3ZhbGlkYXRpb24iOiBbCiAgICAgICAgICAgIHsiaWQiOiJydC5yZXNvbHZlci5oYXNfcHJpbWFyeSIsInNlbGVjdCI6InJ1bnRpbWUucmVzb2x2ZXIub3JkZXIiLCJhc3NlcnQiOnsiY29udGFpbnMiOiJwcmltYXJ5In0sInNldmVyaXR5IjoiZXJyb3IifSwKICAgICAgICAgICAgeyJpZCI6ImZ4LnJlZ2lzdHJ5LnByZXNlbnQiLCJzZWxlY3QiOiJmdW5jdGlvbnMiLCJhc3NlcnQiOnsiZXhpc3RzIjpUcnVlfSwic2V2ZXJpdHkiOiJlcnJvciJ9CiAgICAgICAgXSwKICAgICAgICAibWV0YWNvZ25pdGlvbiI6IHsic2lnbmFscyI6IFsKICAgICAgICAgICAgeyJpZCI6ImRpZ2VzdC5kZWx0YSIsInR5cGUiOiJkaWdlc3RfZGlmZiIsInNjb3BlIjpbInJ1bnRpbWUiLCJmdW5jdGlvbnMiLCJtZXRhY29nbml0aW9uIiwieWdnZHJhc2lsIl19LAogICAgICAgICAgICB7ImlkIjoiY2hhbmdlLnJhdGUiLCJ0eXBlIjoiY2hhbmdlX3JhdGUiLCJ3aW5kb3ciOjIwLCJ0aHJlc2hvbGRfd2FybiI6NCwidGhyZXNob2xkX2VyciI6OH0KICAgICAgICBdfQogICAgfSwKICAgICJjb21tX21vZGUiOiJzaWxlbnQiLCJpbnRlcnZhbCI6MzAwLCJqaXR0ZXIiOjUKfQoKY2xhc3MgUmVzb2x2ZXI6CiAgICBkZWYgX19pbml0X18oc2VsZiwgcHJpbWFyeTogc3RyLCBmYWxsYmFjazogc3RyLCBsb2NhbF9yb290OiBzdHIsIG9yZGVyOiBMaXN0W3N0cl0pOgogICAgICAgIHNlbGYucHJpbWFyeSwgc2VsZi5mYWxsYmFjaywgc2VsZi5sb2NhbF9yb290LCBzZWxmLm9yZGVyID0gcHJpbWFyeSwgZmFsbGJhY2ssIGxvY2FsX3Jvb3QsIG9yZGVyCiAgICAgICAgc2VsZi5zZXNzaW9uID0gTm9uZQogICAgICAgIHdpdGggY29udGV4dGxpYi5zdXBwcmVzcyhFeGNlcHRpb24pOgogICAgICAgICAgICBpbXBvcnQgcmVxdWVzdHMgYXMgX3IKICAgICAgICAgICAgc2VsZi5zZXNzaW9uID0gX3IuU2Vzc2lvbigpCiAgICBkZWYgX2ZldGNoX2h0dHAoc2VsZiwgdXJsOiBzdHIpIC0+IGJ5dGVzOgogICAgICAgIGlmIHNlbGYuc2Vzc2lvbiBpcyBOb25lOiByYWlzZSBSdW50aW1lRXJyb3IoIm5ldHdvcmsgZGlzYWJsZWQ7IGNhbm5vdCBmZXRjaCByZW1vdGUgVVJMIikKICAgICAgICByID0gc2VsZi5zZXNzaW9uLmdldCh1cmwsIHRpbWVvdXQ9MTIpOyByLnJhaXNlX2Zvcl9zdGF0dXMoKTsgcmV0dXJuIHIuY29udGVudAogICAgZGVmIF9mZXRjaF9sb2NhbChzZWxmLCByZWxwYXRoOiBzdHIpIC0+IGJ5dGVzOgogICAgICAgIHBhdGggPSBvcy5wYXRoLmpvaW4oc2VsZi5sb2NhbF9yb290LCByZWxwYXRoKQogICAgICAgIHdpdGggb3BlbihwYXRoLCAicmIiKSBhcyBmOiByZXR1cm4gZi5yZWFkKCkKICAgIGRlZiBmZXRjaChzZWxmLCByZWxwYXRoOiBzdHIpIC0+IFR1cGxlW2J5dGVzLCBzdHIsIHN0cl06CiAgICAgICAgbGFzdF9lcnI9Tm9uZQogICAgICAgIGZvciBzcmMgaW4gc2VsZi5vcmRlcjoKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgaWYgc3JjPT0icHJpbWFyeSI6IHVybD1mIntzZWxmLnByaW1hcnl9L3tyZWxwYXRofSI7IHJldHVybiBzZWxmLl9mZXRjaF9odHRwKHVybCksIHNyYywgdXJsCiAgICAgICAgICAgICAgICBlbGlmIHNyYz09ImZhbGxiYWNrIjogdXJsPWYie3NlbGYuZmFsbGJhY2t9L3tyZWxwYXRofSI7IHJldHVybiBzZWxmLl9mZXRjaF9odHRwKHVybCksIHNyYywgdXJsCiAgICAgICAgICAgICAgICBlbHNlOiBkYXRhPXNlbGYuX2ZldGNoX2xvY2FsKHJlbHBhdGgpOyByZXR1cm4gZGF0YSwgImxvY2FsIiwgZiJmaWxlOi8ve3NlbGYubG9jYWxfcm9vdH0ve3JlbHBhdGh9IgogICAgICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgICAgICBsYXN0X2Vycj1lOyBjb250aW51ZQogICAgICAgIHJhaXNlIFJ1bnRpbWVFcnJvcihmIkFsbCByZXNvbHZlcnMgZmFpbGVkIGZvciB7cmVscGF0aH06IHtsYXN0X2Vycn0iKQoKY2xhc3MgUmluZzoKICAgIGRlZiBfX2luaXRfXyhzZWxmLCBjYXA6aW50PTY0KTogc2VsZi5idWY6TGlzdFtEaWN0W3N0cixBbnldXT1bXTsgc2VsZi5jYXA9Y2FwOyBzZWxmLmxvY2s9dGhyZWFkaW5nLlJMb2NrKCkKICAgIGRlZiBhcHBlbmQoc2VsZix4OkRpY3Rbc3RyLEFueV0pOgogICAgICAgIHdpdGggc2VsZi5sb2NrOgogICAgICAgICAgICBzZWxmLmJ1Zi5hcHBlbmQoeCk7IHNlbGYuYnVmPXNlbGYuYnVmWy1zZWxmLmNhcDpdCiAgICBkZWYgc25hcHNob3Qoc2VsZik6CiAgICAgICAgd2l0aCBzZWxmLmxvY2s6IHJldHVybiBsaXN0KHNlbGYuYnVmKQoKY2xhc3MgQUNJU3RhdGU6CiAgICBkZWYgX19pbml0X18oc2VsZik6IHNlbGYubG9jaz10aHJlYWRpbmcuUkxvY2soKTsgc2VsZi5zdGF0ZTpEaWN0W3N0cixBbnldPXt9OyBzZWxmLm1ldGE6RGljdFtzdHIsQW55XT17fTsgc2VsZi5oaXN0b3J5PVJpbmcoNjQpCiAgICBkZWYgdXBkYXRlKHNlbGYsbmFtZTpzdHIsY29udGVudDpBbnksKixzb3VyY2U6c3RyLHVybDpzdHIsZGlnZXN0OnN0cik6CiAgICAgICAgd2l0aCBzZWxmLmxvY2s6CiAgICAgICAgICAgIHNlbGYuc3RhdGVbbmFtZV09Y29udGVudDsgc2VsZi5tZXRhW25hbWVdPXsidHMiOm5vd191dGMoKSwic291cmNlIjpzb3VyY2UsInVybCI6dXJsLCJzaGEyNTYiOmRpZ2VzdH07CiAgICAgICAgICAgIHNlbGYuaGlzdG9yeS5hcHBlbmQoeyJuYW1lIjpuYW1lLCoqc2VsZi5tZXRhW25hbWVdfSkKICAgIGRlZiBnZXQoc2VsZixwYXRoOnN0ciktPkFueToKICAgICAgICBub2RlOkFueT17KipzZWxmLnN0YXRlfQogICAgICAgIGZvciBwYXJ0IGluIHBhdGguc3BsaXQoJy4nKTogbm9kZSA9IChub2RlLmdldChwYXJ0KSBpZiBpc2luc3RhbmNlKG5vZGUsZGljdCkgZWxzZSBOb25lKQogICAgICAgIHJldHVybiBub2RlCiAgICBkZWYgc25hcHNob3Qoc2VsZiktPkRpY3Rbc3RyLEFueV06CiAgICAgICAgd2l0aCBzZWxmLmxvY2s6IHJldHVybiB7InN0YXRlIjpkaWN0KHNlbGYuc3RhdGUpLCJtZXRhIjpkaWN0KHNlbGYubWV0YSksImhpc3RvcnkiOnNlbGYuaGlzdG9yeS5zbmFwc2hvdCgpLCJ0cyI6bm93X3V0YygpfQoKQUNJX01FTU9SWT1BQ0lTdGF0ZSgpCgpkZWYgd3JpdGVfc3RhdGVfc25hcHNob3QoZmlsZW5hbWU6c3RyPSJhY3RpdmUuanNvbiIpLT5zdHI6CiAgICBzbmFwPUFDSV9NRU1PUlkuc25hcHNob3QoKTsgZGF0YT1qc29uLmR1bXBzKHNuYXAsaW5kZW50PTIsZW5zdXJlX2FzY2lpPUZhbHNlKS5lbmNvZGUoInV0Zi04IikKICAgIHBhdGg9b3MucGF0aC5qb2luKFNUQVRFX0RJUixmaWxlbmFtZSk7IGF0b21pY193cml0ZShwYXRoLGRhdGEpOyByZXR1cm4gcGF0aAoKZGVmIHdyaXRlX2F1ZGl0KHRhc2s6c3RyLHN0YXR1czpzdHIsZGV0YWlsczpEaWN0W3N0cixBbnldKS0+c3RyOgogICAgcmVjPXsiam9iX2lkIjp1dWlkLnV1aWQ0KCkuaGV4LCJ0YXNrIjp0YXNrLCJzdGF0dXMiOnN0YXR1cywidHMiOm5vd191dGMoKSwiZGV0YWlscyI6ZGV0YWlsc30KICAgIGRhdGE9anNvbi5kdW1wcyhyZWMsaW5kZW50PTIsZW5zdXJlX2FzY2lpPUZhbHNlKS5lbmNvZGUoInV0Zi04IikKICAgIG5hbWU9ZiJhdWRpdF97cmVjWydqb2JfaWQnXX0uanNvbiI7IGF0b21pY193cml0ZShvcy5wYXRoLmpvaW4oQVVESVRfRElSLG5hbWUpLGRhdGEpOyByZXR1cm4gbmFtZQoKZGVmIGxvYWRfc3BlYygpLT5EaWN0W3N0cixBbnldOgogICAgdHJ5OgogICAgICAgIHdpdGggb3BlbihTUEVDX1BBVEgsInJiIikgYXMgZjogcmV0dXJuIF9yZWxheGVkX2pzb25fYnl0ZXNfdG9fb2JqKGYucmVhZCgpKQogICAgZXhjZXB0IEV4Y2VwdGlvbjoKICAgICAgICBkYXRhPWpzb24uZHVtcHMoU1BFQ19ERUZBVUxULGluZGVudD0yLGVuc3VyZV9hc2NpaT1GYWxzZSkuZW5jb2RlKCJ1dGYtOCIpOyBhdG9taWNfd3JpdGUoU1BFQ19QQVRILGRhdGEpOyByZXR1cm4gU1BFQ19ERUZBVUxUCgpkZWYgaW5nZXN0X29uY2Uoc3BlYzpEaWN0W3N0cixBbnldKS0+RGljdFtzdHIsQW55XToKICAgIHJlc19jZmc9c3BlY1sicmVzb3VyY2VzIl07IG9yZGVyPXNwZWMuZ2V0KCJyZXNvbHZlcnMiLHt9KS5nZXQoIm9yZGVyIixbInByaW1hcnkiLCJmYWxsYmFjayIsImxvY2FsIl0pCiAgICByZXNvbHZlcj1SZXNvbHZlcihzcGVjWyJyZXNvbHZlcnMiXS5nZXQoInByaW1hcnkiLENBTk9OSUNBTCksc3BlY1sicmVzb2x2ZXJzIl0uZ2V0KCJmYWxsYmFjayIsQ0ROX0ZBTExCQUNLKSxzcGVjWyJyZXNvbHZlcnMiXS5nZXQoImxvY2FsX3Jvb3QiLExPQ0FMX1JPT1QpLG9yZGVyKQogICAgc3VtbWFyeT17ImluZ2VzdGVkIjpbXSwgImVycm9ycyI6W119CiAgICBmb3IgciBpbiByZXNfY2ZnOgogICAgICAgIHJlbHBhdGg9clsicmVscGF0aCJdOyBraW5kPXIuZ2V0KCJraW5kIiwianNvbiIpOyByZXF1aXJlZD10dXBsZShyLmdldCgicmVxdWlyZWRfa2V5cyIsW10pKTsgb3B0aW9uYWw9ci5nZXQoIm9wdGlvbmFsIixGYWxzZSkKICAgICAgICB0cnk6CiAgICAgICAgICAgIHJhdyxzcmMsdXJsPXJlc29sdmVyLmZldGNoKHJlbHBhdGgpOyBkaWc9c2hhMjU2KHJhdykKICAgICAgICAgICAgaWYga2luZD09Impzb24iOgogICAgICAgICAgICAgICAgdHJ5OiBvYmo9anNvbi5sb2FkcyhyYXcpCiAgICAgICAgICAgICAgICBleGNlcHQgRXhjZXB0aW9uOiBvYmo9X3JlbGF4ZWRfanNvbl9ieXRlc190b19vYmoocmF3KQogICAgICAgICAgICAgICAgZm9yIGsgaW4gcmVxdWlyZWQ6CiAgICAgICAgICAgICAgICAgICAgaWYgayBub3QgaW4gb2JqOiByYWlzZSBLZXlFcnJvcihmIntFUlJbJ1NDSEVNQV9NSVNTSU5HX0tFWSddfToge2t9IikKICAgICAgICAgICAgICAgIEFDSV9NRU1PUlkudXBkYXRlKHJbIm5hbWUiXSxvYmosc291cmNlPXNyYyx1cmw9dXJsLGRpZ2VzdD1kaWcpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICB0ZXh0PXJhdy5kZWNvZGUoInV0Zi04IixlcnJvcnM9InJlcGxhY2UiKTsgQUNJX01FTU9SWS51cGRhdGUoclsibmFtZSJdLHRleHQsc291cmNlPXNyYyx1cmw9dXJsLGRpZ2VzdD1kaWcpCiAgICAgICAgICAgIHN1bW1hcnlbImluZ2VzdGVkIl0uYXBwZW5kKHsibmFtZSI6clsibmFtZSJdLCJ1cmwiOnVybCwic291cmNlIjpzcmMsInNoYTI1NiI6ZGlnfSkKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIGlmIG9wdGlvbmFsOiBzdW1tYXJ5WyJpbmdlc3RlZCJdLmFwcGVuZCh7Im5hbWUiOnJbIm5hbWUiXSwib3B0aW9uYWxfbWlzc2luZyI6VHJ1ZX0pOyBjb250aW51ZQogICAgICAgICAgICBzdW1tYXJ5WyJlcnJvcnMiXS5hcHBlbmQoeyJuYW1lIjpyWyJuYW1lIl0sImVycm9yIjpzdHIoZSl9KQogICAgcmV0dXJuIHN1bW1hcnkKCmRlZiBfYXNzZXJ0X2V2YWwoc2VsZWN0b3JfdmFsOkFueSxzcGVjOkRpY3Rbc3RyLEFueV0pLT5PcHRpb25hbFtzdHJdOgogICAgaWYgImV4aXN0cyIgaW4gc3BlYzoKICAgICAgICB3YW50PWJvb2woc3BlY1siZXhpc3RzIl0pOyBnb3Q9c2VsZWN0b3JfdmFsIGlzIG5vdCBOb25lCiAgICAgICAgaWYgZ290IT13YW50OiByZXR1cm4gZiJleGlzdHMgZXhwZWN0ZWQge3dhbnR9LCBnb3Qge2dvdH0iCiAgICBpZiAiZXF1YWxzIiBpbiBzcGVjOgogICAgICAgIGlmIHNlbGVjdG9yX3ZhbCE9c3BlY1siZXF1YWxzIl06IHJldHVybiBmImVxdWFscyBleHBlY3RlZCB7c3BlY1snZXF1YWxzJ119LCBnb3Qge3NlbGVjdG9yX3ZhbH0iCiAgICBpZiAiY29udGFpbnMiIGluIHNwZWM6CiAgICAgICAgdj1zcGVjWyJjb250YWlucyJdCiAgICAgICAgdHJ5OgogICAgICAgICAgICBpZiB2IG5vdCBpbiBzZWxlY3Rvcl92YWw6IHJldHVybiBmImNvbnRhaW5zIGV4cGVjdGVkIHt2fSwgbm90IGluIHtzZWxlY3Rvcl92YWx9IgogICAgICAgIGV4Y2VwdCBFeGNlcHRpb246CiAgICAgICAgICAgIHJldHVybiBmImNvbnRhaW5zIG5vdC1hcHBsaWNhYmxlIGZvciB7dHlwZShzZWxlY3Rvcl92YWwpLl9fbmFtZV9ffSIKICAgIGlmICJyZWdleCIgaW4gc3BlYzoKICAgICAgICBwYXQ9cmUuY29tcGlsZShzcGVjWyJyZWdleCJdKTsgdGV4dD1qc29uLmR1bXBzKHNlbGVjdG9yX3ZhbCxlbnN1cmVfYXNjaWk9RmFsc2UpIGlmIG5vdCBpc2luc3RhbmNlKHNlbGVjdG9yX3ZhbCxzdHIpIGVsc2Ugc2VsZWN0b3JfdmFsCiAgICAgICAgaWYgbm90IHBhdC5zZWFyY2godGV4dCBvciAiIik6IHJldHVybiBmInJlZ2V4IHtzcGVjWydyZWdleCddfSBkaWQgbm90IG1hdGNoIgogICAgcmV0dXJuIE5vbmUKCmRlZiBydW5fc2VsZl92YWxpZGF0aW9uKHNwZWM6RGljdFtzdHIsQW55XSktPkRpY3Rbc3RyLEFueV06CiAgICBjaGVja3M9c3BlYy5nZXQoImhvb2tzIix7fSkuZ2V0KCJzZWxmX3ZhbGlkYXRpb24iLFtdKTsgZmFpbHVyZXM6TGlzdFtEaWN0W3N0cixBbnldXT1bXQogICAgZm9yIGMgaW4gY2hlY2tzOgogICAgICAgIHNlbD1jLmdldCgic2VsZWN0IiwiIik7IHZhbD1BQ0lfTUVNT1JZLmdldChzZWwpIGlmIHNlbCBlbHNlIE5vbmU7IGVycj1fYXNzZXJ0X2V2YWwodmFsLGMuZ2V0KCJhc3NlcnQiLHt9KSkKICAgICAgICBpZiBlcnI6IGZhaWx1cmVzLmFwcGVuZCh7ImlkIjpjLmdldCgiaWQiKSwic2VsZWN0IjpzZWwsInJlYXNvbiI6ZXJyLCJzZXZlcml0eSI6Yy5nZXQoInNldmVyaXR5Iiwid2FybiIpfSkKICAgIHJldHVybiB7ImZhaWx1cmVzIjpmYWlsdXJlcywgInBhc3NlZCI6bGVuKGZhaWx1cmVzKT09MH0KCmRlZiBydW5fbWV0YWNvZ25pdGlvbihzcGVjOkRpY3Rbc3RyLEFueV0pLT5EaWN0W3N0cixBbnldOgogICAgc2lnbmFsc19jZmc9c3BlYy5nZXQoImhvb2tzIix7fSkuZ2V0KCJtZXRhY29nbml0aW9uIix7fSkuZ2V0KCJzaWduYWxzIixbXSk7IHNpZ25hbHM6TGlzdFtEaWN0W3N0cixBbnldXT1bXQogICAgaGlzdG9yeT1BQ0lfTUVNT1JZLmhpc3Rvcnkuc25hcHNob3QoKQogICAgZm9yIHMgaW4gc2lnbmFsc19jZmc6CiAgICAgICAgc2lkPXMuZ2V0KCJpZCIpOyBzdHlwZT1zLmdldCgidHlwZSIpCiAgICAgICAgaWYgc3R5cGU9PSJkaWdlc3RfZGlmZiI6CiAgICAgICAgICAgIHNjb3BlPXMuZ2V0KCJzY29wZSIsW10pOyBkaWZmcz17fQogICAgICAgICAgICBmb3IgbmFtZSBpbiBzY29wZToKICAgICAgICAgICAgICAgIHByZXY9Tm9uZQogICAgICAgICAgICAgICAgZm9yIGggaW4gcmV2ZXJzZWQoaGlzdG9yeSk6CiAgICAgICAgICAgICAgICAgICAgaWYgaC5nZXQoIm5hbWUiKT09bmFtZToKICAgICAgICAgICAgICAgICAgICAgICAgaWYgcHJldiBpcyBOb25lOiBwcmV2PWguZ2V0KCJzaGEyNTYiKQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlOiBkaWZmc1tuYW1lXT17Im5ldyI6cHJldiwib2xkIjpoLmdldCgic2hhMjU2IiksImNoYW5nZWQiOnByZXYhPWguZ2V0KCJzaGEyNTYiKX07IGJyZWFrCiAgICAgICAgICAgIHNpZ25hbHMuYXBwZW5kKHsiaWQiOnNpZCwidHlwZSI6c3R5cGUsImRpZmZzIjpkaWZmc30pCiAgICAgICAgZWxpZiBzdHlwZT09ImNoYW5nZV9yYXRlIjoKICAgICAgICAgICAgd2luZG93PWludChzLmdldCgid2luZG93IiwyMCkpOyB0dz1pbnQocy5nZXQoInRocmVzaG9sZF93YXJuIiw0KSk7IHRlPWludChzLmdldCgidGhyZXNob2xkX2VyciIsOCkpCiAgICAgICAgICAgIHdpbmRvd19oaXN0PWhpc3RvcnlbLXdpbmRvdzpdOyBjaGFuZ2VzPXt9CiAgICAgICAgICAgIGZvciBoIGluIHdpbmRvd19oaXN0OgogICAgICAgICAgICAgICAgbm09aC5nZXQoIm5hbWUiKTsgY2hhbmdlc1tubV09Y2hhbmdlcy5nZXQobm0sMCkrMQogICAgICAgICAgICBteD1tYXgoY2hhbmdlcy52YWx1ZXMoKSkgaWYgY2hhbmdlcyBlbHNlIDAKICAgICAgICAgICAgbGV2ZWwgPSAiZXJyIiBpZiBteD49dGUgZWxzZSAoIndhcm4iIGlmIG14Pj10dyBlbHNlICJvayIpCiAgICAgICAgICAgIHNpZ25hbHMuYXBwZW5kKHsiaWQiOnNpZCwidHlwZSI6c3R5cGUsImxldmVsIjpsZXZlbCwibWF4X2NoYW5nZXMiOm14LCJieV9uYW1lIjpjaGFuZ2VzfSkKICAgICAgICBlbHNlOgogICAgICAgICAgICBzaWduYWxzLmFwcGVuZCh7ImlkIjpzaWQsInR5cGUiOnN0eXBlLCJub3RlIjoidW5rbm93biBzaWduYWwgdHlwZSJ9KQogICAgQUNJX01FTU9SWS5tZXRhLnNldGRlZmF1bHQoIm1ldGFjb2duaXRpb24iLHt9KTsgQUNJX01FTU9SWS5tZXRhWyJtZXRhY29nbml0aW9uIl1bInRzIl09bm93X3V0YygpOyBBQ0lfTUVNT1JZLm1ldGFbIm1ldGFjb2duaXRpb24iXVsic2lnbmFscyJdPXNpZ25hbHMKICAgIHJldHVybiB7InNpZ25hbHMiOnNpZ25hbHN9CgpkZWYgY3ljbGVfb25jZShjb21tX21vZGU6c3RyPSJzaWxlbnQiKS0+RGljdFtzdHIsQW55XToKICAgIHNwZWM9bG9hZF9zcGVjKCk7IHN1bW1hcnk9aW5nZXN0X29uY2Uoc3BlYyk7IHNlbGZ2PXJ1bl9zZWxmX3ZhbGlkYXRpb24oc3BlYyk7IG1ldGE9cnVuX21ldGFjb2duaXRpb24oc3BlYykKICAgIHdyaXRlX3N0YXRlX3NuYXBzaG90KCk7IHN0YXR1cyA9ICJPSyIgaWYgKG5vdCBzdW1tYXJ5WyJlcnJvcnMiXSBhbmQgc2VsZnZbInBhc3NlZCJdKSBlbHNlICgiV0FSTiIgaWYgc2VsZnZbInBhc3NlZCJdIGVsc2UgIkVSUiIpCiAgICBkZXRhaWxzPXsiaW5nZXN0ZWQiOnN1bW1hcnlbImluZ2VzdGVkIl0sImVycm9ycyI6c3VtbWFyeVsiZXJyb3JzIl0sInNlbGZfdmFsaWRhdGlvbiI6c2VsZnYsIm1ldGFjb2duaXRpb24iOm1ldGF9CiAgICBuYW1lPXdyaXRlX2F1ZGl0KCJhdWRpdC5jeWNsZSIsc3RhdHVzLGRldGFpbHMpOyBsb2dfbGluZShmImN5Y2xlIHN0YXR1cz17c3RhdHVzfSAtPiB7bmFtZX0iLGNvbW1fbW9kZT1jb21tX21vZGUpCiAgICBpZiBjb21tX21vZGUgaW4geyJhdWRpdC1vbmx5Iiwibm90aWZ5LW9uLWVycm9yIn0gYW5kIHN0YXR1cz09IkVSUiI6IGxvZ19saW5lKCJFUlJPUiBkZXRlY3RlZCDigJQgY2hlY2sgYXVkaXQgZmlsZSBmb3IgZGV0YWlscyIsY29tbV9tb2RlPWNvbW1fbW9kZSxsZXZlbD0iRVJST1IiKQogICAgcmV0dXJuIHsic3RhdHVzIjpzdGF0dXMsImF1ZGl0IjpuYW1lfQoKZGVmIGJ1aWxkX2FyZ3BhcnNlcigpLT5hcmdwYXJzZS5Bcmd1bWVudFBhcnNlcjoKICAgIHA9YXJncGFyc2UuQXJndW1lbnRQYXJzZXIoZGVzY3JpcHRpb249IkFDSSBBZGFwdGl2ZSBBdWRpdCBSdW5uZXIgKEpTT04tbmF0aXZlKSIpCiAgICBwLmFkZF9hcmd1bWVudCgiLS1tb2RlIixjaG9pY2VzPVsicHVsbCIsIm9uY2UiXSxkZWZhdWx0PSJwdWxsIikKICAgIHAuYWRkX2FyZ3VtZW50KCItLWludGVydmFsIix0eXBlPWZsb2F0LGRlZmF1bHQ9Tm9uZSxoZWxwPSJQdWxsIGludGVydmFsIHNlY29uZHMiKQogICAgcC5hZGRfYXJndW1lbnQoIi0taml0dGVyIix0eXBlPWZsb2F0LGRlZmF1bHQ9Tm9uZSxoZWxwPSJSYW5kb20gaml0dGVyIGFkZGVkIHRvIGludGVydmFsIikKICAgIHAuYWRkX2FyZ3VtZW50KCItLWNvbW0iLGNob2ljZXM9bGlzdChDT01NX01PREVTKSxkZWZhdWx0PU5vbmUsaGVscD0iQ29tbXVuaWNhdGlvbiBtb2RlIikKICAgIHAuYWRkX2FyZ3VtZW50KCItLXNpbGVudCIsYWN0aW9uPSJzdG9yZV90cnVlIixoZWxwPSJBbGlhcyBmb3IgLS1jb21tIHNpbGVudCIpCiAgICByZXR1cm4gcAoKZGVmIG1haW4oYXJndjpPcHRpb25hbFtMaXN0W3N0cl1dPU5vbmUpLT5pbnQ6CiAgICBhcmdzPWJ1aWxkX2FyZ3BhcnNlcigpLnBhcnNlX2FyZ3MoYXJndikKICAgIHNwZWM9bG9hZF9zcGVjKCk7IGNvbW1fbW9kZSA9ICJzaWxlbnQiIGlmIGFyZ3Muc2lsZW50IGVsc2UgKGFyZ3MuY29tbSBvciBzcGVjLmdldCgiY29tbV9tb2RlIiwic2lsZW50IikpCiAgICBpbnRlcnZhbCA9IGFyZ3MuaW50ZXJ2YWwgb3IgZmxvYXQoc3BlYy5nZXQoImludGVydmFsIiwzMDApKTsgaml0dGVyID0gYXJncy5qaXR0ZXIgb3IgZmxvYXQoc3BlYy5nZXQoImppdHRlciIsNSkpCiAgICBpZiBhcmdzLm1vZGU9PSJvbmNlIjogY3ljbGVfb25jZShjb21tX21vZGU9Y29tbV9tb2RlKTsgcmV0dXJuIDAKICAgIGJhY2tvZmY9MS4wCiAgICB3aGlsZSBUcnVlOgogICAgICAgIG91dD1jeWNsZV9vbmNlKGNvbW1fbW9kZT1jb21tX21vZGUpOyBzdGF0dXM9b3V0LmdldCgic3RhdHVzIikKICAgICAgICBpZiBzdGF0dXM9PSJPSyI6IGJhY2tvZmY9MS4wOyBkZWxheT1pbnRlcnZhbCtyYW5kb20udW5pZm9ybSgwLGppdHRlcikKICAgICAgICBlbGlmIHN0YXR1cz09IldBUk4iOiBiYWNrb2ZmPW1pbig2MC4wLGJhY2tvZmYqMik7IGRlbGF5PW1heChpbnRlcnZhbC8yLGJhY2tvZmYpCiAgICAgICAgZWxzZTogYmFja29mZj1taW4oMTIwLjAsYmFja29mZioyKTsgZGVsYXk9YmFja29mZgogICAgICAgIHRpbWUuc2xlZXAobWF4KDAuMSxkZWxheSkpCgppZiBfX25hbWVfXz09Il9fbWFpbl9fIjoKICAgIGltcG9ydCBzeXM7IHN5cy5leGl0KG1haW4oKSkK"
    },
    {
      "target": "/mnt/data/aci/config/aci_runner_spec.json",
      "mode": "0644",
      "sha256": "c3a2707b646f26667697a88814e3ce70e7b37f39613372c78f39e440446a1f6b",
      "encoding": "utf8",
      "content": "{\n  \"$meta\": {\n    \"artifact_id\": \"ArtifactID:4oci6MbqPmGJ4k\",\n    \"sha256\": \"77f2dd8b081229fee08f06d93025c490bbc94438b50f7825f034541e3d2a6706\",\n    \"issued\": \"2025-10-04T18:13:59Z\",\n    \"path\": \"aci://library/aci_audit_runner/aci_runner_spec.v0.2.json\"\n  },\n  \"version\": \"0.2\",\n  \"resolvers\": {\n    \"order\": [\n      \"primary\",\n      \"fallback\",\n      \"local\"\n    ],\n    \"primary\": \"https://raw.githubusercontent.com/aliasnet/aci/main\",\n    \"fallback\": \"https://aci.aliasmail.cc\",\n    \"local_root\": \"/mnt/data/aci/local\"\n  },\n  \"resources\": [\n    {\n      \"name\": \"prime_directive\",\n      \"relpath\": \"prime_directive.md\",\n      \"kind\": \"md\"\n    },\n    {\n      \"name\": \"runtime\",\n      \"relpath\": \"runtime.json\",\n      \"kind\": \"json\",\n      \"required_keys\": [\n        \"resolver\"\n      ]\n    },\n    {\n      \"name\": \"functions\",\n      \"relpath\": \"functions.json\",\n      \"kind\": \"json\"\n    },\n    {\n      \"name\": \"metacognition\",\n      \"relpath\": \"library/metacognition/metacognition.json\",\n      \"kind\": \"json\"\n    },\n    {\n      \"name\": \"metacognition_options\",\n      \"relpath\": \"library/metacognition/metacognition_options.json\",\n      \"kind\": \"json\",\n      \"optional\": true\n    },\n    {\n      \"name\": \"yggdrasil\",\n      \"relpath\": \"entities/yggdrasil/yggdrasil.json\",\n      \"kind\": \"json\"\n    }\n  ],\n  \"locators_regex\": {\n    \"metacognition\": \"library/metacognition/metacognition(_options)?\\\\.json$\",\n    \"functions\": \"functions(\\\\.registry)?\\\\.json$\",\n    \"yggdrasil\": \"entities/ygg(dr|rd)asil\\\\.json$\",\n    \"prime_directive\": \"prime(_)?directive\\\\.(md|txt)$\"\n  },\n  \"hooks\": {\n    \"self_validation\": [\n      {\n        \"id\": \"rt.resolver.has_primary\",\n        \"select\": \"runtime.resolver.order\",\n        \"assert\": {\n          \"contains\": \"primary\"\n        },\n        \"severity\": \"error\"\n      },\n      {\n        \"id\": \"fx.registry.present\",\n        \"select\": \"functions\",\n        \"assert\": {\n          \"exists\": true\n        },\n        \"severity\": \"error\"\n      }\n    ],\n    \"metacognition\": {\n      \"signals\": [\n        {\n          \"id\": \"digest.delta\",\n          \"type\": \"digest_diff\",\n          \"scope\": [\n            \"runtime\",\n            \"functions\",\n            \"metacognition\",\n            \"yggdrasil\"\n          ]\n        },\n        {\n          \"id\": \"change.rate\",\n          \"type\": \"change_rate\",\n          \"window\": 20,\n          \"threshold_warn\": 4,\n          \"threshold_err\": 8\n        }\n      ]\n    }\n  },\n  \"comm_mode\": \"silent\",\n  \"interval\": 300,\n  \"jitter\": 5,\n  \"recovery\": {\n    \"corpus_id\": \"ACI-RC-20251003-v0.2\",\n    \"path\": \"library/aci_audit_runner/aci_runner_corpus.v0.2.json\",\n    \"sha256\": \"e4c9c6e317b3457bc46cbad6c0d0a151adb9f05f85056a5a8c179595daa4f394\"\n  }\n}\n"
    }
  ],
  "restore_instructions": [
    "Create parent dirs if missing.",
    "Write each file atomically; set permissions.",
    "Verify sha256 for each file.",
    "Run: python /mnt/data/aci/library/aci_runner/adaptive_audit_runner.py --mode once --silent"
  ]
}
