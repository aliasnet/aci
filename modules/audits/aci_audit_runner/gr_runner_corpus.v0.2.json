{
  "$meta": {
    "artifact_id": "ArtifactID:BJkqri2Urq9mC8",
    "sha256": "0e8aa9440607d969aa5b4f008b9dc9f4911dc13b83aa92b6efa9ac86d5eb701d",
    "issued": "2025-10-04T18:13:59Z",
    "path": "aci://modules/audits/aci_audit_runner/gr_runner_corpus.v0.2.json"
  },
  "corpus_id": "ACI-RC-20251003-v0.2",
  "created": "2025-10-03T00:00:00Z",
  "files": [
    {
      "target": "/mnt/data/aci/modules/audits/aci_audit_runner/adaptive_audit_runner.py",
      "mode": "0644",
      "sha256": "c58c76c1feed023ff26b5db503be54753a613c4b1fe4a918d90b8f6fa61daae0",
      "encoding": "base64",
      "content": ""
    },
    {
      "target": "/mnt/data/aci/config/aci_runner_spec.json",
      "mode": "0644",
      "sha256": "9da30a0d65eb283f4dc8eb0046e3774406367d1726b7e8fff05eb44dd28307bf",
      "encoding": "utf-8",
      "content": "ewogICIkbWV0YSI6IHsKICAgICJhcnRpZmFjdF9pZCI6ICJBcnRpZmFjdElEOjRvY2k2TWJxUG1HSjRrIiwKICAgICJzaGEyNTYiOiAiMTI2NDE0ZDU2MTM3NTgwZmY5OTMwODdmYmQ5NTYwZGU3OGRkMTc3MjFhNTcyMDQzYzAyNzAzZGQyYzYxY2NlNyIsCiAgICAiaXNzdWVkIjogIjIwMjUtMTAtMDRUMTg6MTM6NTlaIiwKICAgICJwYXRoIjogImFjaTovL21vZHVsZXMvYXVkaXRzL2FjaV9hdWRpdF9ydW5uZXIvYWNpX3J1bm5lcl9zcGVjLnYwLjIuanNvbiIKICB9LAogICJ2ZXJzaW9uIjogIjAuMiIsCiAgInJlc29sdmVycyI6IHsKICAgICJvcmRlciI6IFsKICAgICAgInByaW1hcnkiLAogICAgICAiZmFsbGJhY2siLAogICAgICAibG9jYWwiCiAgICBdLAogICAgInByaW1hcnkiOiAiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2FsaWFzbmV0L2FjaS9tYWluIiwKICAgICJmYWxsYmFjayI6ICJodHRwczovL2FjaS5hbGlhc21haWwuY2MiLAogICAgImxvY2FsX3Jvb3QiOiAiL21udC9kYXRhL2FjaS9sb2NhbCIKICB9LAogICJyZXNvdXJjZXMiOiBbCiAgICB7CiAgICAgICJuYW1lIjogInByaW1lX2RpcmVjdGl2ZSIsCiAgICAgICJyZWxwYXRoIjogInByaW1lX2RpcmVjdGl2ZS5tZCIsCiAgICAgICJraW5kIjogIm1kIgogICAgfSwKICAgIHsKICAgICAgIm5hbWUiOiAicnVudGltZSIsCiAgICAgICJyZWxwYXRoIjogInJ1bnRpbWUuanNvbiIsCiAgICAgICJraW5kIjogImpzb24iLAogICAgICAicmVxdWlyZWRfa2V5cyI6IFsKICAgICAgICAicmVzb2x2ZXIiCiAgICAgIF0KICAgIH0sCiAgICB7CiAgICAgICJuYW1lIjogImZ1bmN0aW9ucyIsCiAgICAgICJyZWxwYXRoIjogImZ1bmN0aW9ucy5qc29uIiwKICAgICAgImtpbmQiOiAianNvbiIKICAgIH0sCiAgICB7CiAgICAgICJuYW1lIjogIm1ldGFjb2duaXRpb24iLAogICAgICAicmVscGF0aCI6ICJtb2R1bGVzL21ldGFjb2duaXRpb24vbWV0YWNvZ25pdGlvbi5qc29uIiwKICAgICAgImtpbmQiOiAianNvbiIKICAgIH0sCiAgICB7CiAgICAgICJuYW1lIjogIm1ldGFjb2duaXRpb25fb3B0aW9ucyIsCiAgICAgICJyZWxwYXRoIjogIm1vZHVsZXMvbWV0YWNvZ25pdGlvbi9tZXRhY29nbml0aW9uX29wdGlvbnMuanNvbiIsCiAgICAgICJraW5kIjogImpzb24iLAogICAgICAib3B0aW9uYWwiOiB0cnVlCiAgICB9LAogICAgewogICAgICAibmFtZSI6ICJ5Z2dkcmFzaWwiLAogICAgICAicmVscGF0aCI6ICJiaW5kZXJzL3lnZ2RyYXNpbC5qc29uIiwKICAgICAgImtpbmQiOiAianNvbiIKICAgIH0KICBdLAogICJsb2NhdG9yc19yZWdleCI6IHsKICAgICJtZXRhY29nbml0aW9uIjogIm1vZHVsZXMvbWV0YWNvZ25pdGlvbi9tZXRhY29nbml0aW9uKF9vcHRpb25zKT9cXC5qc29uJCIsCiAgICAiZnVuY3Rpb25zIjogImZ1bmN0aW9ucyhcXC5yZWdpc3RyeSk/XFwuanNvbiQiLAogICAgInlnZ2RyYXNpbCI6ICJlbnRpdGllcy95Z2coZHJ8cmQpYXNpbFxcLmpzb24kIiwKICAgICJwcmltZV9kaXJlY3RpdmUiOiAicHJpbWUoXyk/ZGlyZWN0aXZlXFwuKG1kfHR4dCkkIgogIH0sCiAgImhvb2tzIjogewogICAgInNlbGZfdmFsaWRhdGlvbiI6IFsKICAgICAgewogICAgICAgICJpZCI6ICJydC5yZXNvbHZlci5oYXNfcHJpbWFyeSIsCiAgICAgICAgInNlbGVjdCI6ICJydW50aW1lLnJlc29sdmVyLm9yZGVyIiwKICAgICAgICAiYXNzZXJ0IjogewogICAgICAgICAgImNvbnRhaW5zIjogInByaW1hcnkiCiAgICAgICAgfSwKICAgICAgICAic2V2ZXJpdHkiOiAiZXJyb3IiCiAgICAgIH0sCiAgICAgIHsKICAgICAgICAiaWQiOiAiZngucmVnaXN0cnkucHJlc2VudCIsCiAgICAgICAgInNlbGVjdCI6ICJmdW5jdGlvbnMiLAogICAgICAgICJhc3NlcnQiOiB7CiAgICAgICAgICAiZXhpc3RzIjogdHJ1ZQogICAgICAgIH0sCiAgICAgICAgInNldmVyaXR5IjogImVycm9yIgogICAgICB9CiAgICBdLAogICAgIm1ldGFjb2duaXRpb24iOiB7CiAgICAgICJzaWduYWxzIjogWwogICAgICAgIHsKICAgICAgICAgICJpZCI6ICJkaWdlc3QuZGVsdGEiLAogICAgICAgICAgInR5cGUiOiAiZGlnZXN0X2RpZmYiLAogICAgICAgICAgInNjb3BlIjogWwogICAgICAgICAgICAicnVudGltZSIsCiAgICAgICAgICAgICJmdW5jdGlvbnMiLAogICAgICAgICAgICAibWV0YWNvZ25pdGlvbiIsCiAgICAgICAgICAgICJ5Z2dkcmFzaWwiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiaWQiOiAiY2hhbmdlLnJhdGUiLAogICAgICAgICAgInR5cGUiOiAiY2hhbmdlX3JhdGUiLAogICAgICAgICAgIndpbmRvdyI6IDIwLAogICAgICAgICAgInRocmVzaG9sZF93YXJuIjogNCwKICAgICAgICAgICJ0aHJlc2hvbGRfZXJyIjogOAogICAgICAgIH0KICAgICAgXQogICAgfQogIH0sCiAgImNvbW1fbW9kZSI6ICJzaWxlbnQiLAogICJpbnRlcnZhbCI6IDMwMCwKICAiaml0dGVyIjogNSwKICAicmVjb3ZlcnkiOiB7CiAgICAiY29ycHVzX2lkIjogIkFDSS1SQy0yMDI1MTAwMy12MC4yIiwKICAgICJwYXRoIjogIm1vZHVsZXMvYXVkaXRzL2FjaV9hdWRpdF9ydW5uZXIvZ3JfcnVubmVyX2NvcnB1cy52MC4yLmpzb24iLAogICAgInNoYTI1NiI6ICJlNGM5YzZlMzE3YjM0NTdiYzQ2Y2JhZDZjMGQwYTE1MWFkYjlmMDVmODUwNTZhNWE4YzE3OTU5NWRhYTRmMzk0IgogIH0sCiAgImNhZGVuY2UiOiB7CiAgICAibW9kZSI6ICJidXJzdCIsCiAgICAibWluX2N5Y2xlcyI6IDEsCiAgICAicmVjb21tZW5kZWRfbWF4X2N5Y2xlcyI6IDIsCiAgICAiaW50ZXJ2YWxfc2Vjb25kcyI6IDMwMCwKICAgICJqaXR0ZXJfc2Vjb25kcyI6IDUsCiAgICAiZGVhZGxpbmVfc2Vjb25kcyI6IDE4MDAsCiAgICAibm90ZXMiOiAiVXNlIC0tbWF4LWN5Y2xlcyAxIGZvciBub21pbmFsIGJ1cnN0czsgZXh0ZW5kIHRvIDIgb25seSBmb3IgZGlhZ25vc3RpY3Mgd2l0aGluIHRoZSAzMCBtaW51dGUgcGxhdGZvcm0gd2luZG93LiIKICB9LAogICJzY2hlZHVsZXJfcHJvbXB0IjogewogICAgInN1bW1hcnkiOiAiUnVuIGFuIEFDSSBhdWRpdCBidXJzdCB0byBrZWVwIGFydGlmYWN0cyB3YXJtIGluIC9tbnQvZGF0YS4iLAogICAgInN0ZXBzIjogWwogICAgICAiRW5zdXJlIC9tbnQvZGF0YS9hY2kvbW9kdWxlcy9hdWRpdHMvYWNpX2F1ZGl0X3J1bm5lci9hZGFwdGl2ZV9hdWRpdF9ydW5uZXIucHksIC9tbnQvZGF0YS9hY2kvbG9ncy8sIC9tbnQvZGF0YS9hY2kvc3RhdGUvLCBhbmQgL21udC9kYXRhL2FjaS9hdWRpdC90bXAvIGV4aXN0IChjcmVhdGUgZGlyZWN0b3JpZXMgaWYgbWlzc2luZykuIiwKICAgICAgIklmIHRoZSBydW5uZXIgaXMgbWlzc2luZywgcmVidWlsZCB0aGUgSlNPTi1uYXRpdmUgc2tlbGV0b24gZnJvbSB0aGUgcmVjb3ZlcnkgY29ycHVzIHNvIGVhY2ggY3ljbGUgd3JpdGVzIHN0YXRlLTxVVEM+Lmpzb24sIGF1ZGl0LTxVVEM+Lmpzb24sIGFuZCBhbiBJTkZPIGxpbmUgdG8gYWNpLVlZWVlNTURELmxvZy4iLAogICAgICAiRXhlY3V0ZSB0aGUgYnVyc3Qgd2l0aCBhZGFwdGl2ZSBzcGFjaW5nLCBlbmZvcmNlIGF0IGxlYXN0IG9uZSBzYWZlIGl0ZXJhdGlvbiwgY2FwIHRoZSBydW4gd2l0aCAtLW1heC1jeWNsZXMgMSAob3IgMiB3aGVuIGRlYnVnZ2luZyksIGFuZCBob25vciB0aGUgMTgwMCBzZWNvbmQgYnVyc3QgZGVhZGxpbmUuIiwKICAgICAgIkhvbGQgYXJ0aWZhY3RzIGxvY2FsbHkgdW5sZXNzIHJlcXVlc3RlZDsgcmVwb3J0IHN1Y2Nlc3Mgd2l0aCAnQXVkaXQgYnVyc3QgT0sgKDEgY3ljbGUpLicgb3IgZ2FwcyB3aXRoICdNSVNTSU5HIDxwYXRoPiAodHJpZWQ6IGdpdGh1YiwgbWlycm9yLCBsb2NhbCwgcHJvamVjdCknLiIKICAgIF0sCiAgICAiY29tbWFuZCI6ICJweXRob24gL21udC9kYXRhL2FjaS9tb2R1bGVzL2F1ZGl0cy9hY2lfYXVkaXRfcnVubmVyL2FkYXB0aXZlX2F1ZGl0X3J1bm5lci5weSAtLW1vZGUgcHVsbCAtLWludGVydmFsIDMwMCAtLWppdHRlciA1IC0tc2lsZW50IC0tbWF4LWN5Y2xlcyAxIC0tYnVyc3QtZGVhZGxpbmUgMTgwMCIsCiAgICAic3VjY2Vzc19tZXNzYWdlIjogIkF1ZGl0IGJ1cnN0IE9LICgxIGN5Y2xlKS4iLAogICAgIm1pc3NpbmdfdGVtcGxhdGUiOiAiTUlTU0lORyA8cGF0aD4gKHRyaWVkOiBnaXRodWIsIG1pcnJvciwgbG9jYWwsIHByb2plY3QpIgogIH0sCiAgImZpbmFsX2NoZWNrIjogewogICAgIm9yZGVyIjogWwogICAgICAicHJpbWVfZGlyZWN0aXZlLnR4dHxtZCIsCiAgICAgICJydW50aW1lLmpzb24iLAogICAgICAiZW50aXRpZXMuanNvbiIsCiAgICAgICJmdW5jdGlvbnMuanNvbiIsCiAgICAgICJtb2R1bGVzL21ldGFjb2duaXRpb24vbWV0YWNvZ25pdGlvbi5qc29uIiwKICAgICAgIm1vZHVsZXMvbWV0YWNvZ25pdGlvbi9tZXRhY29nbml0aW9uX29wdGlvbnMuanNvbiIsCiAgICAgICJiaW5kZXJzL3lnZ2RyYXNpbC5qc29uIiwKICAgICAgIm1vZHVsZXMvYXVkaXRzL2FjaV9hdWRpdF9ydW5uZXIvYWNpX3J1bm5lcl9zcGVjLnYwLjIuanNvbiIsCiAgICAgICJtb2R1bGVzL2F1ZGl0cy9hY2lfYXVkaXRfcnVubmVyL2dyX3J1bm5lcl9jb3JwdXMudjAuMi5qc29uIgogICAgXSwKICAgICJzdWNjZXNzIjogIkF1ZGl0IGJ1cnN0IE9LICgxIGN5Y2xlKS4iLAogICAgIm9uX21pc3NpbmciOiAiTUlTU0lORyA8cGF0aD4gKHRyaWVkOiBnaXRodWIsIG1pcnJvciwgbG9jYWwsIHByb2plY3QpIgogIH0KfQ=="
    }
  ],
  "restore_instructions": [
    "Create parent dirs if missing.",
    "Write each file atomically; set permissions.",
    "Verify sha256 for each file.",
    "Run: python /mnt/data/aci/modules/audits/aci_audit_runner/adaptive_audit_runner.py --mode once --silent"
  ]
}