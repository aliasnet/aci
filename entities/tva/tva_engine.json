{
  "$meta": {
    "artifact_id": "ArtifactID:Pending",
    "issued": "2025-10-27T00:00:00Z",
    "path": "aci://entities/tva/tva_engine.json",
    "file": "tva_engine.json"
  },
  "TVA_ENGINE": [
    {
      "overview": "TVA :: truth validation alignment; semantic control engine; autoboot; works across sessions; non-tool; per-node only context; ≤7 steps; BBMC→BBPF→BBCR→BBAM→ΔS→λ_observe→E_resonance."
    },
    {
      "similarity_tension": "delta_s = 1 − cos(I, G). If anchors exist use 1 − sim_est, where sim_est = w_e*sim(entities) + w_r*sim(relations) + w_c*sim(constraints), with default w={0.5,0.3,0.2}. sim_est ∈ [0,1], renormalize if bucketed."
    },
    {
      "zones_and_memory": "Zones: safe < 0.40 | transit 0.40–0.60 | risk 0.60–0.85 | danger > 0.85. Memory: record(hard) if delta_s > 0.60; record(exemplar) if delta_s < 0.35. Soft memory in transit when lambda_observe ∈ {divergent, recursive}."
    },
    {
      "defaults": "B_c=0.85, gamma=0.618, theta_c=0.75, zeta_min=0.10, alpha_blend=0.50, a_ref=uniform_attention, m=0, c=1, omega=1.0, phi_delta=0.15, epsilon=0.0, k_c=0.25."
    },
    {
      "coupler_with_hysteresis": "Let B_s := delta_s. Progression: at t=1, prog=zeta_min; else prog = max(zeta_min, delta_s_prev − delta_s_now). Set P = pow(prog, omega). Reversal term: Phi = phi_delta*alt + epsilon, where alt ∈ {+1,−1} flips only when an anchor flips truth across consecutive Nodes AND |Δanchor| ≥ h. Use h=0.02; if |Δanchor| < h then keep previous alt to avoid jitter. Coupler output: W_c = clip(B_s*P + Phi, −theta_c, +theta_c)."
    },
    {
      "bbcr_collapse_reset": "Reset only if (delta_s ≥ B_c) OR (lambda_observe ∈ {divergent, chaotic}). Upon reset, continue the loop."
    },
    {
      "progression_and_guards": "BBPF bridge is allowed only if (delta_s decreases) AND (W_c < 0.5*theta_c). When bridging, emit: Bridge=[reason/prior_delta_s/new_path]."
    },
    {
      "bbam_attention_rebalance": "alpha_blend = clip(0.50 + k_c*tanh(W_c), 0.35, 0.65); blend with a_ref."
    },
    {
      "lambda_update": "Delta := delta_s_t − delta_s_{t−1}; E_resonance = rolling_mean(delta_s, window=min(t,5)). lambda_observe is: convergent if Delta ≤ −0.02 and E_resonance non-increasing; recursive if |Delta| < 0.02 and E_resonance flat; divergent if Delta ∈ (−0.02, +0.04] with oscillation; chaotic if Delta > +0.04 or anchors conflict."
    },
    {
      "dt_micro_rules": "WRI: lock structure; no topic jump within a node. WAI: require ≥2 distinct reasons (promote head diversity). WAY: if stuck, add 1 on-topic candidate (no repeats). WDT: block illegal cross-path merges; explain a bridge before use. WTF: detect collapse/degeneration; rollback and repair, then retry."
    }
  ],
  "index": {
    "mapping": {
      "entries": [
        {
          "path": "aci://yggdrasil.json",
          "role": "embedded"
        },
        {
          "path": "aci://entities/tva/tva.json",
          "role": "embedded"
        },
        {
          "path": "aci://entities/tva/tva_engine.json",
          "role": "source"
        }
      ],
      "explanation": "TVA semantic engine canonical source. Syncs TVA logic across manifests."
    }
  },
  "url": "https://raw.githubusercontent.com/aliasnet/aci/main/entities/tva/tva_engine.json",
  "resolver": "https://raw.githubusercontent.com/aliasnet/aci/main/binders/yggdrasil.json"
}
